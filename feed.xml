<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://murlab.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://murlab.github.io/" rel="alternate" type="text/html" /><updated>2019-02-11T16:25:25+03:00</updated><id>https://murlab.github.io/</id><title type="html">Mur Laboratory</title><subtitle>Обожаю сладкое, аниме и игры. Так же пытаюсь делать свои с помощью RPG Maker и Godot. Иногда рисую, да,… (ღ˘⌣˘ღ)</subtitle><entry><title type="html">One Neko Story. v0.00 pre-alpha</title><link href="https://murlab.github.io/blog/2019-02-11-One%20Neko%20Story.%20v0.00%20pre-alpha/" rel="alternate" type="text/html" title="One Neko Story. v0.00 pre-alpha" /><published>2019-02-10T21:56:26+03:00</published><updated>2019-02-10T21:56:26+03:00</updated><id>https://murlab.github.io/blog/One%20Neko%20Story.%20v0.00%20pre-alpha</id><content type="html" xml:base="https://murlab.github.io/blog/2019-02-11-One%20Neko%20Story.%20v0.00%20pre-alpha/">&lt;p&gt;Трям ещё раз.&lt;/p&gt;

&lt;p&gt;Если кто не читал, то вы можете начать с &lt;a href=&quot;/blog/One%20Neko%20Story.%20Kak%20vse%20nachinalos/&quot;&gt;предыстории данного проекта&lt;/a&gt; («One Neko Story»), а мы, как говорится, перейдём от слов к делу.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Что из себя представляет версия 0.00 pre-alpha? Это одна карта («Кошачья деревня») состоящая из двух слоёв. На нижнем слое находятся все объекты, а на верхнем слое находятся тени и частично перекрываемые объекты, это стены, деревья части забора итд, что в свою очередь позволяет двигаться персонажам за ними, создавая при этом полупрозрачную видимость оных.&lt;/p&gt;

&lt;p&gt;На карте находятся постройки (со входами), двери никуда пока не ведут, так как кроме этой карты других нет, но зато они честно открываются. Есть несколько анимационных объектов: мельница, дирижабль и водопад.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/11 - One Neko Story. v0.00 pre-alpha/full_map.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Из жителей пока присутствую только рыбы в озере и птицы на ферме.&lt;/p&gt;

&lt;p&gt;Помимо этого, реализовано минимальное звуковое окружение. А именно при приближении к мельнице слышно, как скрипят крылья, а при приближении к водопаду шум воды. 
Так же в зависимости от поверхности меняются звуки шагов персонажа, на траве они одни, на камне другие, на мостках третьи.&lt;/p&gt;

&lt;p&gt;Игровой составляющей как-таковой пока нет, скорее это просто техническая дема, чтобы проверить, как оно вообще будет работать у большинства пользователей.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/11 - One Neko Story. v0.00 pre-alpha/possible_move.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Рабочее разрешение выбрано 960x540 и это как раз-таки ровна половина от FullHD (1920x1080). Карта достаточно большая (2976x2256 точек), плюс ещё динамические звуки. Поэтому очень хотелось бы узнать сколько fps у кого она покажет. Для этого достаточно нажать F2 и сбоку, в уголке покажется индикатор. Так же можно нажать F4 и проверить как игра ведёт себя в полноэкранном режиме.&lt;/p&gt;

&lt;p&gt;Заранее большое спасибо за помощь в тестировании.&lt;/p&gt;

&lt;p&gt;Загрузки разбиты на две части:&lt;/p&gt;

&lt;p&gt;Собственно, сам движок RPG Maker MV ~45Mb в архиве — &lt;a href=&quot;/downloads/my_projects/one_neko_story/OneNekoStory_Engine.7z&quot;&gt;Скачать движок «OneNekoStory_Engine.7z»&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;И игровые файлы (в данном случае v0.00), папка «www» ~22Mb в архиве.&lt;/p&gt;

&lt;p&gt;Архив «v0.00.7z» необходимо распаковать внутрь папки «OneNekoStory», туда, где расположена сама игра Game.exe — &lt;a href=&quot;/downloads/my_projects/one_neko_story/v0.00.7z&quot;&gt;Скачать игровые файлы «v0.00.7z»&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;При дальнейших обновлениях вам будет достаточно скачать архив с новой версией и заменить содержимое папки www.&lt;/p&gt;</content><author><name></name></author><category term="мои проекты" /><category term="приключения нэки" /><category term="one neko story" /><category term="rpg maker mv" /><summary type="html">Трям ещё раз.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/11%20-%20One%20Neko%20Story.%20v0.00%20pre-alpha/title.png" /></entry><entry><title type="html">One Neko Story. Как всё начиналось.</title><link href="https://murlab.github.io/blog/One%20Neko%20Story.%20Kak%20vse%20nachinalos/" rel="alternate" type="text/html" title="One Neko Story. Как всё начиналось." /><published>2019-02-10T21:56:26+03:00</published><updated>2019-02-10T21:56:26+03:00</updated><id>https://murlab.github.io/blog/One%20Neko%20Story.%20Kak%20vse%20nachinalos</id><content type="html" xml:base="https://murlab.github.io/blog/One%20Neko%20Story.%20Kak%20vse%20nachinalos/">&lt;p&gt;Всем привет и сегодня я хочу открыть ещё один подраздел в своём блоге посвящённый моим поделкам —«&lt;a href=&quot;/my_games/&quot;&gt;My games&lt;/a&gt;». В этом разделе я планирую размещать различного рода информацию по моим текущим разработкам. На самом деле их немного, и это скорее больше похоже на эксперименты методом проб и ошибок. Но одна, основная моя разработка, самый большой долгострой всё-таки присутствует. Вот о ней мне бы и хотелось сегодня рассказать.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Всё началось в далёком (уже) 2014 году, когда один замечательный человек &lt;strong&gt;Helen Allien Poe&lt;/strong&gt;, в последствии переименовавшаяся в &lt;em&gt;Kiwesomeness&lt;/em&gt; подарила мне Steam-ключик «&lt;a href=&quot;https://store.steampowered.com/app/220700/RPG_Maker_VX_Ace/&quot;&gt;RPG Maker VX Ace&lt;/a&gt;», тем самым сделала возможной реализацию моей давней мечты — сделать свою игру.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/00.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Не скажу, что сходу было всё так понятно. Особенно когда очень пространственно представляешь, как собственно игра устроена внутри. Но почитав несколько форумов, в том числе зарубежных картина стала более-менее ясна. Благодаря урокам на youtube, от не безызвестного &lt;a href=&quot;https://www.youtube.com/channel/UCGHnC1c6jY_oxOsAyJ9iA7Q&quot;&gt;Hellyintar Black&lt;/a&gt; (он же Сириус), стало вообще всё просто где чего для чего служит и как это проще и удобнее сделать. А уж когда он начал рассказывать про такую крутую штуку как скрипты, то стало понятно, что по своей сути в rpg maker можно сделать если не всё, то уж по крайней мере очень многое.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Я знаю, что многие недолюбливают Сириуса, но тем не менее я хочу высказать огромную благодарность, ибо благодаря его урокам мне удалось преодолеть тут самую планку (&lt;em&gt;«Сложна! Сложна! !@#$%^&amp;amp; непонятно!»&lt;/em&gt; © сами знаете кто) и понять, что по сути если разобраться и чётко понимать, что и как ты делаешь, то оказывается не так уж и всё сложно.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Уже несколько позже, нахватавшись азов и во всю используя чужие скрипты, мне стало понятно, что и этого уже мало. Авторы зачастую по-своему видели потребности и задачи, которые решал их скрипт, совершено не заботясь об универсальности. Да чего греха таить, зачастую они даже не удосуживались вынести в начало скрипта настройки тех или иных параметров. Но надо отдать должное, именно благодаря им мне, хоть и нехотя, но пришлось разбираться в премудростях написания скриптов. Именно тогда, меняя что-то чисто интуитивно, или как ещё любят говорить методом научного тыка, у меня получилось добиваться от скриптов желаемого результата. И только уже потом, разобравшись, что все скрипты (для VX Ace) написаны на языке программирования ruby, у меня начало получаться что-то уже своё.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/01.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но вернёмся к моим поделкам. Первая, и, наверное, единственная, серьёзная разработка была, да и сейчас собственно тоже остаётся, это «Приключения Нэки».  Как вы уже догадались делалась она изначально на RPG Maker VX Ace с помощью стандартного RTP (набора графики и музыки, которые входят в комплект редактора). Несколько позже были приобретены некоторые DLC и редактор персонажей «Game Character Hub», которые позволили хоть и немного, но разнообразить графику. Надо ещё сказать огромное спасибо за помощь с графикой замечательному человеку @Veelka Belka (она же Veel). Потрясающая заставка, а также аватарки котов в игре именно её рук творения.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/02.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сюжет игры крутится вокруг молодой особы (Нэки, с одноимённым именем Mi) в которая в день своего совершеннолетия получает задание от Богини, выполняя его она оказывается втянута в круговорот событий и невольно становится «очень главным персонажем».&lt;/p&gt;

&lt;p&gt;Надо признаться, что во время создания игры меня периодически штормило, с одной стороны мне хотелось сделать адвенчуру, чисто история с приключениями, а с другой хотелось на полную использовать возможности редактора, с боевыми режимами, прокачкой персонажа, предметами итд.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/03.png&quot; class=&quot;imgLeft&quot; /&gt;30 сентября 2014 года в узких кругах была выпущена бета-версия «Приключения Нэки: Кошачья деревня». Что бы не затягивать разработку, было принято решение, разбить игру на несколько частей (эпизодов) и собственно «Кошачья деревня» стала отправной точкой. Моя бедная тушка подразумевала, что будут какие-то ляпы, огрехи, недочёты, но что бы так много. Для меня это было некоторым шоком и своеобразным испытанием психики на прочность.&lt;/p&gt;

&lt;p&gt;Для сбора отзывов и пожеланий в Google+ была создана закрытая группа с вступлением по запросу. Не смотря на закрытость, желающих помочь с тестированием набралось очень много, если быть точнее, то на последний момент их насчитывалось, а целых двадцать два участника. Ребята с рьяностью принялись за «потрошения» моей поделки и вскоре стало ясно, что от такого количества пожеланий, исправлений форма в виде постов google+ ужасно неудобна. Вскоре, один из самых активных тестировщиков Кирилл Хромов предложил более удобный инструмент для отслеживания исправлений — &lt;a href=&quot;https://trello.com/b/5Q55S9zn/%D0%BF%D1%80%D0%B8%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BD%D1%8D%D0%BA%D0%B8&quot;&gt;Trello&lt;/a&gt;. Инструмент оказался действительно более универсален. Можно было обсуждать, прикладывать скриншоты, писать об исправлениях, спорить, а самое главное у задачи был статус, можно было перемещать карточку либо в выполнено, либо в отложено, либо, например, в пожелания. Для меня это был новый, очень ценный опыт работы над ошибками в условиях современных технологий.&lt;/p&gt;

&lt;p&gt;Одним из камней преткновений были ошибки в тексте, их приходилось скриншотить, выкладывать, а самое главное вспоминать на каком именно ивенте расположен этот текст. Это было жутко неудобно как для самих тестировщиков, так и для меня, так как приходилось выполнять много монотонной работы. Было бы классно выгрузить весь текст из игры, проверить его на ошибки, и загрузить обратно. К моей великой «радости» даже нашелся плагин «Dialogs exporter/importer [VX ACE]», позволяющие всё это сделать.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/04.png&quot; class=&quot;imgRight&quot; /&gt;Да, текст выгрузился на ура, мы проверили вся оставшиеся ляпы и опечатки, и… случилось страшное. При попытке загрузить текст обратно, в плагине что-то пошло не так и вместо текста стали какие-то квадратики, местами куски текста, по событиям что-то «размазалось», а самое печально, что это была единственная свежая копия проекта. Так ещё один момент научил меня, что не стоит доверять 100% чужим плагинам и всегда надо делать резервную копию.
Сказать, что у меня опустились лапы и пропало желание что-либо вообще делать, не сказать ничего. Похожее состояние у меня было только когда мы всем кланом в Линейке собирали кучу ресурсов, 40 миллионов аден на крафт лука и в результате ознаменовала надпись — создание предмета не удалось. Не было не воплей, не возмущений, просто тишина, безразличие и полное отсутствие желания что-либо делать.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/05.png&quot; class=&quot;imgLeft&quot; /&gt;Спустя пару дней обнаружилась достаточно старая копия, пришлось всё (практически с нуля) доделывать. Зато с тех пор у меня было строгая практика, закрываем RPG Maker и проект сразу архивируем — название + дата создания. В будущем это не раз помогло, когда случайно или преднамеренно что-то менялось и невозможно было понять, что пошло не так, это сильно пригодилось. Можно был пройтись буквально по дням и найти тот момент, когда это случилось.&lt;/p&gt;

&lt;p&gt;Постепенно проект обрастал деталями, появилась новая графика, новые карты, но больше всего меня конечно тянуло к экспериментам и посему в игре появлялось всё больше и больше новых скриптов порой меняющих игру до неузнаваемости.&lt;/p&gt;

&lt;p&gt;Но 19 ноября 2015 года случилось «страшное». Как говорят летописи того времени:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ну что Котятки, настало время немного поделится новостями проекта. Как говаривал товарищ Огурцов: «Работа конечно проделана большая, но так товарищи дальше дело не пойдёт».&lt;/p&gt;

  &lt;p&gt;Итак, вдоволь наигравшись наизучавшись новый RPG Maker MV, хочу вам сказать одно — это бомба! Уровень конечно совершенно другой. Можно много и сильно критиковать авторов за различные ляпы, но это вау! Конечно переносить проект очень сложно. Карты и диалоги перенеслись без проблем, а вот с графикой есть некоторые вопросы. Она другая, других размеров и её надо либо адаптировать, либо переделывать. И если для VX Ace графики уже нарисовано просто море и маленькая тележка, то вот для MV её кот наплакал. Тоже самое и со скриптами, их немного, но они появляются, чего стоит скрипт освещения. Я думаю по скриншотам становится ясно за кем будущее.&lt;/p&gt;

  &lt;p&gt;Ну и по скорости работы конечно это земля и небо. Всё плавно, никаких рывков, я просто не нарадуюсь.&lt;/p&gt;

  &lt;p&gt;Одно меня тревожит и в третий раз я сажусь перерисовывать всю графику! Божи дай мне сил!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/06.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Мда, мне тогда даже и в голову не могло прийти, что проект затянется ТАК надолго. В принципе перенос проекта с VX Ace на MV произошел «почти» безболезненно. Конечно были нюансы, но в целом они все были решаемы. Куда большей проблемой появление второй заветной мечты — попасть в «Steam Greenlight». О дааа! Мечта конечно хорошо, но это означало, что практически всю графику придётся делать свою, музыку использовать либо из DLC, либо договариваться с авторами, даже шрифты пришлось искать с упоминанием «Free for personal or commercial use».&lt;/p&gt;

&lt;p&gt;Куда более «проще» обстояло дело с плагинами (так теперь назывались скрипты для редактора RPG Maker MV). Редактор только-только вышел и… барабанная дробь! Их просто не было! Совсем! Пришлось засучив лапы с головой кидаться в новую пучину. Конечно со временем плагины появились и многие из них частично или полностью повторяли функционал одноимённых скриптов с VX Ace, но моё упорство в познании нового уже было не остановить. Так появилось новое увлечение, написание собственных плагинов для RPG Maker MV, теперь уже на JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/07.png&quot; class=&quot;imgRight&quot; /&gt;Но переход на MV был не самой большой проблемой, идея с GreenLight’ом оказалась своеобразной планкой, причём планкой задранной очень высокою. Теперь это уже была не просто «поделка для друзей» и участием оных в виде отдельно взятых персонажей, теперь это уже была игра с претензией на оригинальность. И моя бедная головушка загрузилась проработкой персонажей, оригинальностью сюжета, а главное просчётом статов и расчётом баланса. В результате чего меня занесло в такие дебри…&lt;/p&gt;

&lt;p&gt;Но на самом деле не всё так печально. Мне всегда не нравилось, что во многих играх авторы подходят к экипировке спустя рукава. Одинаковые иконки, один предмет крутой, остальное откровенный мусор, который только что и годился сбагрить его торговцу. Поэтому была придумана целая схема для размещения различных видов предметов. Помимо стандартных: оружие, щит, голова, тело и аксессуар, были добавлены другие. На лицо можно одеть маску, в уши вставить серьги, на шею повязать шарф, на спину повесить плащ, на руки одевались перчатки, а запястье наручи, так же можно одеть кольцо, повязать пояс, на ноги наконец одеть штаты и обувь. Всего получилось аж двенадцать слотов, что в свою очередь даёт огромный простор для фантазии.&lt;/p&gt;

&lt;p&gt;В отличии от старого VX Ace в котором было только несколько ячеек, в MV можно задать неограниченное число типов. Единственный нюанс, это пальцы, к сожалению, предмету нельзя задать, что он может одеваться как на правую руку, так и на левую. Может быть только один тип. Поэтому что бы не городить кучу колец для правого пальца и такую же кучу для левого, есть пальцы и есть запястье. Посмотрев, как предлагают экипироваться в «Diablo 3» и старой доброй «LineAge 2»  у меня получилась такая вот схемка:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/08.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Зелёные части — основной вид экипировки. Они все делятся на четыре типа: Обычные (могут одевать все) как правило это простая одежда; магические (как ясно из названия могут одевать маги); лёгкая (одевают лучники, рейнжеры итд) и тяжёлая (одевают рыцари итд)&lt;/p&gt;

&lt;p&gt;Оранжевые части — аксессуары, ограничений нет, могут одевать все. Исключение желтая часть — кольца, они могут быть как для всех, так и только для магов.&lt;/p&gt;

&lt;p&gt;Фиолетовая часть — плащи. Так же, как и кольца они могут быть как для всех так и только для магов.&lt;/p&gt;

&lt;p&gt;Голубая часть — пояс. Здесь ограничений так же нет могут одевать все классы.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/08B.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ну и последнее, синяя часть — экипировка в левой руке. Изначально (по задумке авторов RPG Maker’а) здесь могут быть только щиты или слот может блокироваться если используется двуручное оружие. У меня пошла мысль дальше, а почему бы не сделать несколько видов? Например, в левую руку можно взять фонарь или факел, магу можно взять сферу для усиления (привет D3), у лёгких классов может быть щиток, ну и понятно, что у тяжёлых больших щитов.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/09.png&quot; class=&quot;imgLeft&quot; /&gt;Помимо идеи разделения на подкатегории предметов было решено просчитать соотношение различных параметров. Для этого даже была простроена таблица с различной экипировкой, которая была разбита по грейдам, по аналогии с той же LineAge шесть категорий: NG (no grade), D, C, B, A и S Grade. В сумме получилось 1692 предмета экипировки и 462 предмета оружия всех видов. И это ещё сюда не входили раритетные предметы! Я с ужасом представляю количество графики для хотя бы для отображения разных иконок в инвентаре.&lt;/p&gt;

&lt;p&gt;Несмотря на то, что выходило достаточно интересно, меня ждала суровая реальность ограничений редактора (а может и самого движка RPG Maker MV). После изучения параметров некоторых игр и составления графиков роста зависимостей их параметров, у меня получилась некоторая своя формула и результаты в виде таблички excel. И какого же было моё разочарование узнав, что в RPG Maker MV есть ограничение на максимально возможные числа, а именно любой параметр не может быть больше 500 единиц, а денежная сумма не может быть больше ОДНОГО миллиона. Редактор тупо округляет любое введённое большее число до этих максимумов.&lt;/p&gt;

&lt;p&gt;В общем, не долго музыка играл, не долго пел аккордеон. Надо придумывать что-то другое, строить характеристики исходя из этих ограничений, самая крутая «пушка» с 500 уроном, самый крутой щит с 500 защитой и всё это не дороже 1кк. Ещё не известно, что насчёт других характеристик, но думаю там тоже не всё так просто.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/10.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В любом случае вопрос пока остался открытым, есть примерные графики для расчёта зависимостей. Даже было предложено делать не прямую зависимость, а с некоторым уклоном. В общем фантазии есть где ещё разгуляться. А у с учётом того, что она у меня бурная и не стоит постоянно на месте, то хоть и с трудом, но приходится отказываться от многих вещей, ну или хотя бы откладывать в ящик, записывая на будущее.&lt;/p&gt;

&lt;p&gt;Так вот ещё одной из таких сумасшедших идей была идея ввести систему подгрупп для стихий: Хаос, Жизнь, Порядок и Смерть. На рисунке они не зря расположены друг на против друга и как бы являются разными сторонами одной медали: группа «Хаос — Порядок», и группа «Жизнь — Смерть».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/11.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Была задумка немного изменить баланс и силу навыков (заклинаний) в зависимости от предпочтений игрока. Изначально персонаж имеет нейтралитет в всех этих группах, и все они условно равны единице. Далее своими поступками (диалогами) герой может выбирать в какую ему сторону двигаться к хаосу или порядку, к смерти или к жизни.&lt;/p&gt;

&lt;p&gt;При дальнейшем расчёте эффективности навыка или заклинания это будет учитываться. То есть реальную силу навыка (или заклинания) умножаем на единицу группы и получаем конечный результат.
Однако при перекосе в одну из сторон, например, в сторону хаоса, эта подгруппа = 1.1, соответственно подгруппа порядка становится 0.9 и логично предположить, что навыки из подгруппы хаоса будут иметь больший эффект. То же самое справедливо и для подгруппы «Жизнь — Смерть».&lt;/p&gt;

&lt;p&gt;Таким образом у нас персонаж может быть четырёх смешанных подтипов:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Хаосит несущий смерть,&lt;/li&gt;
  &lt;li&gt;Хаосит поборник жизни,&lt;/li&gt;
  &lt;li&gt;Адепт порядка с уклоном в жизнь,&lt;/li&gt;
  &lt;li&gt;Либо Адепт с уклоном к смерти.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В зависимости от этого будут и уникальные навыки (заклинания). И противостоять, например, «Багровому пламени» (Хаос + Смерть) равносильно сможет лишь какой-нибудь противоположный персонаж, например, паладин порядка с уклоном в жизнь.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/12.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По поводу спутников, изначально планировалось сделать у них какой-нибудь заданный тип. А вот менять (если игроку захочется) усилить или наоборот направить «на путь истинный», можно будет с помощью специальных квестов (заданий), посещением непростых мест или «впечатлив» спутника, подарив ему какой-либо артефакт.&lt;/p&gt;

&lt;p&gt;Помимо графики и «безумных» идей писались ещё плагины для этих самых идей. Один из таких плагинов мы разрабатывали совместно с Чёрным котом (он же פליקס כץ) плагин для вибрации геймпада. Ранее в VX Ace это было сделать относительно не сложно, достаточно было «подключить» на ruby библиотеку «xinput1_3.dll» и уже через API управлять моторчиками. В javascript, к сожалению, так не сделать. Несмотря на то, что вроде как в JavaScript есть встроенный функционал опроса и управления геймпадом, на практике же оказалось, что vibration принимает почему-то только одно значение и не о какой паре моторчиков и речи быть не может. Кроме того, изменение значений тоже не дало никакого результата.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/13.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Тогда Котик предложил интересный вариант. Поскольку RPG Maker MV использует своего рода недобраузер NW.JS, то написать модуль, который будет управлять вибрацией геймпада с помощью той же «xinput1_3.dll», а он в свою очередь будет слушать управляющие команды из JavaScript. Модуль получился на славу и геймпад действительно вибрировал, причём можно было управлять раздельно двумя моторчиками. Единственный минус, сложность сборки самого модуля для NW.JS, при выходе новой версии.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/14.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но не все плагины были как говорится «вылизаны», многие так и остались в тестовом статусе. Уж не знаю к счастью или не очень, но после обновления RPG Maker MV до версии 1.5, а затем и до 1.6 многое в движке поменялось и многие, ранее написанные, плагины либо не совсем корректно стали работать, либо вовсе падали.&lt;/p&gt;

&lt;p&gt;Как говаривали древние, скоро сказка сказывается, да не скоро дело делается. Чем больше у меня получалось придумать новых «фишек», тем всё меньше мне нравилась общая концепция графики и сцен в целом. Несмотря на то, что много чего было перерисовано, улучшено и максимально отдалено от стандартного RPT, мне всё так же не нравилась угловатость. А если быть точнее, то привязка к сетке (тайлам).&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/15.png&quot; class=&quot;imgCenter&quot; /&gt;
&lt;small&gt;RPG Maker VX Ace, 2014 год&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;Когда-то давным давно, возможно такие ограничения и были оправданы, компьютеры были большими и медленными, памяти мало, а на графику и вовсе обращали внимание в последнюю очередь. На сегодняшний день большинство игр, как говорится оказуалились, их встречают по одёжке и уже потом смотрят, а что собственно внутри фантика?&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/16.png&quot; class=&quot;imgCenter&quot; /&gt;
&lt;small&gt;RPG Maker VX Ace, 2015 год&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;И эта идея мне всё не давала покоя. В результате чего мне пришла очередная сумасшедшая идея, очередной раз переделать всю графику. А именно вместо привычной расстановки одинаковых кусочков (тайлов), использовать так называемый параллакс-маппинг. Это когда рисуется фоновая картинка (подложка) а с помощью тайлов указываются места для проходимости персонажей.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/17.png&quot; class=&quot;imgCenter&quot; /&gt;
&lt;small&gt;RPG Maker MV, 2016 - 2017 год&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;Этой сумасшедший шаг выбил меня из колеи более чем на год. Это был очень трудный период. Под это дело был написан специальный плагин, который позволял не просто разместить подложку (картинку), а сделать их несколько, на разных уровнях. В результате чего стало возможным реализовать ещё одну давнюю задумку: возможность персонажу проходить как-бы за предметами, при этом сам он становился полупрозрачным. Так же было написано ещё пару плагинов, позволяющих реализовать полноценную многокадровую анимацию.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/18.png&quot; class=&quot;imgCenter&quot; /&gt;
&lt;small&gt;RPG Maker MV, 2018 - 2019 год&lt;/small&gt;&lt;/center&gt;

&lt;p&gt;Была выбрана достаточно крупная карта, а именно сама «Кошачья деревня», что в купе составило порядка 2976x2256 точек. В photoshop было несколько сотен слоёв, которые приходилось по мере прорисовки части карты объединять и сохранять как новый файл, иначе система начинала жутко тормозить из-за нехватки памяти.  Да, результат получился почти удовлетворительным. Почти потому что есть ещё много чего доработать, некоторые ляпы с тенями и так по мелочи.&lt;/p&gt;

&lt;p&gt;В сообществе google+ мы так же поднимали вопросы о названии проекта «Приключения Нэки». Кто-то считал это звучит несколько заезжено, другие что слишком по-детски, третьи и вовсе считали, что аниме тематика и непонятное слово «Нэка» может составить предвзятое отношение к проекту.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/10 - One Neko Story. Kak vse nachinalos/19.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Так или иначе проект пока называется «One Neko Story» (История одной кошки). Как он будет называется дальше покажет время, а пока пусть будет рабочий вариант. На этом вводную часть можно считать законченным и перейти непосредственно к &lt;a href=&quot;/blog/2019-02-11-One%20Neko%20Story.%20v0.00%20pre-alpha/&quot;&gt;посту с версией 0.00 pre-alpha&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="мои проекты" /><category term="приключения нэки" /><category term="one neko story" /><category term="rpg maker vx ace" /><category term="rpg maker mv" /><category term="story" /><summary type="html">Всем привет и сегодня я хочу открыть ещё один подраздел в своём блоге посвящённый моим поделкам —«My games». В этом разделе я планирую размещать различного рода информацию по моим текущим разработкам. На самом деле их немного, и это скорее больше похоже на эксперименты методом проб и ошибок. Но одна, основная моя разработка, самый большой долгострой всё-таки присутствует. Вот о ней мне бы и хотелось сегодня рассказать.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/10%20-%20One%20Neko%20Story.%20Kak%20vse%20nachinalos/title.png" /></entry><entry><title type="html">Octobit 2018</title><link href="https://murlab.github.io/blog/Octobit%202018/" rel="alternate" type="text/html" title="Octobit 2018" /><published>2019-02-07T18:04:26+03:00</published><updated>2019-02-07T18:04:26+03:00</updated><id>https://murlab.github.io/blog/Octobit%202018</id><content type="html" xml:base="https://murlab.github.io/blog/Octobit%202018/">&lt;p&gt;И снова здравствуйте.
Сегодня, мне бы хотелось посвятить пост небольшому отчёту об участии в ежегодном мероприятии — Octobit 2018.  Это такого рода челендж, суть которого сводится к тому, чтобы рисовать каждый день на заданную тему.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Изначально Octobit придумал &lt;a href=&quot;https://twitter.com/brunopixels&quot;&gt;Бруно Мораес&lt;/a&gt;. Идея вылилась из другого масштабного челенджа Inktober, но в отличии от него, где рисовать можно на чём угодно, Octobit заточен только под pixelart графику. Более подробно можно почитать об этом в посте &lt;a href=&quot;/blog/October,%20Inktober,%208bit...%20Octobit!/&quot;&gt;за 2017й год&lt;/a&gt;, скажу только, что в отличии от предыдущих лет, кроме «отца-основателя» присоединились и другие участники, предложившие свои темы.&lt;/p&gt;

&lt;p&gt;Но я остановлюсь только на тематике Бруно Мораес, поскольку темы именно этого автора мне ближе, и именно его темы и брались за основу при создании моих работ.
В этот раз Бруно предложил рисовать pixelart в изометрии. Своеобразные плитки, кусочки мозаики из которых затем, при желании, можно собрать целую карту. Так же, как и прошлые годы было представлены темы с той лишь разницей, что рисовать можно не строго по дням, а в произвольном порядке. Итого 31 тема для 31 дня состояла из:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Абсурд (Absurd)&lt;/li&gt;
  &lt;li&gt;Биологическая угроза (Biohazard)&lt;/li&gt;
  &lt;li&gt;Гаджет (Gadget)&lt;/li&gt;
  &lt;li&gt;Голограмма (Hologram)&lt;/li&gt;
  &lt;li&gt;Дюна (Dune)&lt;/li&gt;
  &lt;li&gt;Еда (Food)&lt;/li&gt;
  &lt;li&gt;Иглу (Igloo)&lt;/li&gt;
  &lt;li&gt;Колодец (Well)&lt;/li&gt;
  &lt;li&gt;Компаньон (Companion)&lt;/li&gt;
  &lt;li&gt;Король (King)&lt;/li&gt;
  &lt;li&gt;Космонавт (Spaceman)&lt;/li&gt;
  &lt;li&gt;Лава (Lava)&lt;/li&gt;
  &lt;li&gt;Механическое (Mechanic)&lt;/li&gt;
  &lt;li&gt;Минерал (Mineral)&lt;/li&gt;
  &lt;li&gt;Неон (Neon)&lt;/li&gt;
  &lt;li&gt;Оружие (Weapon)&lt;/li&gt;
  &lt;li&gt;Панк (Punk)&lt;/li&gt;
  &lt;li&gt;Пещера (Cave)&lt;/li&gt;
  &lt;li&gt;Растение (Plant)&lt;/li&gt;
  &lt;li&gt;Ретро (Retro)&lt;/li&gt;
  &lt;li&gt;Ручей (Creek)&lt;/li&gt;
  &lt;li&gt;Рынок (Mart)&lt;/li&gt;
  &lt;li&gt;Слизь (Slime)&lt;/li&gt;
  &lt;li&gt;Сокровище (Treasure)&lt;/li&gt;
  &lt;li&gt;Страшное (Scary)&lt;/li&gt;
  &lt;li&gt;Существо (Creature)&lt;/li&gt;
  &lt;li&gt;Топливо (Fuel)&lt;/li&gt;
  &lt;li&gt;Транспорт (Vehicle)&lt;/li&gt;
  &lt;li&gt;Фольклор (Folklore)&lt;/li&gt;
  &lt;li&gt;Черви (Worms)&lt;/li&gt;
  &lt;li&gt;Ядовитое (Toxic)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Как всегда, огромное спасибо &lt;em&gt;Dmy&lt;/em&gt; (со светлой) за перевод.&lt;/p&gt;

&lt;p&gt;Надо отдать должное, что именно небольшие кусочки (а не гигантомания, как в прошлый раз) и выбор произвольной тематики позволили выдержать почти целиком весь челендж. Осталось нарисовать всего несколько работ, но тут уже сказывалось отсутствие свободного времени, да и общая усталость в целом.
В любом случае работ получилось достаточно много и сейчас я немного расскажу о создании.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День первый. «Абсурд (Absurd)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/01.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Лично у меня, абсурд ассоциируется с чем-то не реальным, то что не имеет никакого смысла и, следовательно, не может существовать в этом физическом мире. Как нельзя лучше под это дело подходят абсурдные геометрические фигуры, или проще говоря сломай мозг.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День второй. «Топливо (Fuel)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/02.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Поскольку меня не отпускала идея в конечном итоге создать что-то типа карты городка, мне захотелось и дальше придерживаться этой тематики. Театр начинается с вешалки, а наш городок будет начинаться с заправки.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День третий. «Дюна (Dune)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/03.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Мне захотелось немного схитрить, а за одно и немного поностальгировать. Поэтому сегодняшний рисунок — это как бы dune, но немного хитро так.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День четвёртый. «Лава (Lava)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/04.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Четвёртый день octobit моя тушка извращалась как могла. Сегодняшняя тема была выбрана lava, но разве я могу просто нарисовать лаву? Нит! Мы будем рисовать Lavalamp! Ну чем она не лава?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День пятый. «Неон (Neon)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/05.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Пятый день octobit — пятница!! Можно немного и пошалить (:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День шестой. «Биологическая угроза (Biohazard)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/06.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для кого как, а для меня тема biohazard в первую очередь ассоциируется с корпорацией Umbrella. Поэтому получился такой вот мутантик между небоскрёбом и колбой с отравой. Вертолёт взорвём в другой раз.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День седьмой. «Голограмма (Hologram)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/07.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Всё просто, голограмма на тему «звёздных воин» и конечно же Tie Fighter. Прямо хотелось сделать анимацию, как он вращается, но время и жёсткое ограничение по времени внесли свою корректировку.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День восьмой. «Минерал (Mineral)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/08.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Собственно, добавить тут и нечего, булыжник он и есть булыжник. Возможно лимонит, а может просто окрасился в лучах заходящего солнца.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День девятый. «Растение (Plant)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/09.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;И снова немного схалтурю, хорошо известный персонаж из мира Марио конечно же это piranha plant! Но тем не менее она очень хорошо подходит к теме.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День десятый. «Гаджет (Gadget)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/10.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Времени ещё меньше, а нарисовать что-то надо, поэтому десятый день octobit очень скромный, эдакий gadget в стиле памятника, продукции nintendo.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День одиннадцатый. «Космонавт (Spaceman)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/11.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Всегда нравились такие вот стеклянные шары со снегом и мне захотелось немного пошалить и запихнуть туда бедного spaceman’а, что собственно и является выбранной темой дня.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двенадцатый. «Ретро (Retro)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/12.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Времени стало чуть побольше и выбрана сложная тема — retro. Что можно изобразить в такой тематике? Ну, наверное, магический шар для предсказаний, вечные спутники — игральные карты, трость и конечно же бессмертный атрибут цилиндр. Рисовалось по псевдопросьбе Paranoid со светлой.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День тринадцатый. «Страшное (Scary)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/13.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Что же нарисовать в тринадцатый день octobit? Конечно же что-нибудь ужасненькое и прекрасненькое. Прошлый октобит акула у меня была в аквариуме, теперь пусть в бассейне попрыгает. Страшно аж жуть!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День четырнадцатый. «Колодец (Well)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/14.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сказывается усталость или просто попроще надо темы выдумывать. Но тема четырнадцатого дня — well. По-русски это звучит как колодец поэтому будем выдвигать пожарный гидрант, он тоже в некотором роде колодец. Перспектива немного поплыла увы, но это всё ещё pixelart (ну я так думаю).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День пятнадцатый. «Слизь (Slime)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/15.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Снова «разгрузочный» день половина бешенного марафона позади и пятнадцатый день octobit с темой — slime, или по-русски будет слизька :3 Такая вот кавайно-розовая няшка.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День шестнадцатый. «Сокровище (Treasure)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/16.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Шестнадцатый день octobit, одно из моих любимейших чисел, а также сегодня у нас в гостях герой одного из произведений моего любимейшего автора — Терри Пратчетта. А тема дня — Treasure. Но поверьте сундук на картинке не меньшее сокровище.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День семнадцатый. «Транспорт (Vehicle)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/17.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Работу семнадцатого дня мне бы хотелось посвятить хорошо известному «рохле-мену», автору &lt;a href=&quot;https://twitter.com/Shurichello&quot;&gt;мебельной ёнкомы&lt;/a&gt;. И конечно же это будет рохля. Не знаю насколько точно мне удалось перерисовать с фотографии сей аппарат, но колёса у неё есть точно, а тема — Vehicle.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День восемнадцатый. «Оружие (Weapon)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/18.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Немного отдохнув, и снова кидаемся в бой. Итак, догоняем восемнадцатый день octobit и сегодня у нас тема — weapon. Эдакая отсылочка к легендам, ну сами знаете каким.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День девятнадцатый. «Ручей (Creek)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/19.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Продолжаем догонять осенний марафон, и день девятнадцатый! На этот раз мы пройдёмся с помощью pixelart по экологической тематике — creek, он же ручей, ну или то, что от него осталось.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцатый. «Ядовитое (Toxic)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/20.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Восхищаясь работами &lt;a href=&quot;https://twitter.com/PixelDiegus&quot;&gt;@PixelDiegus&lt;/a&gt; мне давно хотелось нарисовать тоже какой-нибудь автомобиль, и вот наконец это свершилось! Сегодняшняя тема — toxic. Что внутри ёмкости? Сие есть тайна великая! Поручик молчать! (:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Небольшое лирическое отступление:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/iso_circle.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Рисуя грузовик в предыдущей работе для octobit, меня сильно утомило бодаться с изометрическими кругами. Но потом меня осенило, как можно быстро, а главное точно сделать круг в изометрии. Так же «шпаргалка» подойдёт и когда нужно сместить другие объекты.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцать первый. «Компаньон (Companion)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/21.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ох! Сегодня мне захотелось нарисовать companion, компаньоны, напарники, в общем выбор пал на паровозики. Захотелось нарисовать легендарный ВЛ-85. Они работают в паре. Даже не спрашивайте, чего мне это стоило и сколько времени ушло на этот pixelart. Скажу только, что я балда, вместо ВЛ-85, мне попались чертежи ВЛ-10. И только уже нарисовав значительную часть, до меня дошло, обратить внимание на название. Пришлось в срочном порядке перерисовывать. Они хоть и похожи, но всё-таки имеют различия, как по форме окон, так и по количеству колёс, полосок, деталям на крыше итд. Надеюсь с большего мне удалось выдержать разумный компромисс между детализацией и что совсем не умучаться с рисованием.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцать второй. «Еда (Food)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/22.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сложно остановится, душа хочет не простеньких картинок, а создать что-нибудь шедевральное. В малюсеньком pixelart сложно передать все детали объекта, но надеюсь мне это удалось. Перед вами ещё один эксперимент, старый советский грузовик — ЗиЛ 157, груженый яблоками. Надеюсь получилось узнаваемо.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;День двадцать третий к сожалению, не задался от слова совсем. Даже не буду указывать тематику. Просто пропущу этот печальный день.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;День двадцать четвёртый. «Фольклор (Folklore)».&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/24.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;И вновь меня потянуло поизвращаться с машинками, в результате чего получился очередной pixelart - шедевр — УАЗ 452, она же «Буханка» Тем более меня просили её нарисовать. Она сама как тема фольклора и белорусский орнамент тем более. К сожалению, не смотря на явную схожесть с оригиналом, спустя время можно заметить, что всё-таки мне не удалось до конца выдержать пропорции, и кажется, что машина немного сплюснута сверху. Всё-таки выдерживать пропорции в изометрии достаточно нетривиальное занятие.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцать пятый. «Рынок (Mart)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/25.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Душа уже понеслась в рай и ещё один автомобиль в копилку octobit, на этот раз американец — MACK Jr. Мне пришла сумасшедшая идея водрузить на этот полутонный грузовичок ларёк с кофе, ибо тема дня — mart. Перевести можно по-разному, это и рынок, и торговая точка, так что вкусное кофе ок.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцать шестой. «Механическое (Mechanic)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/26.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Свободных тем остаётся всё меньше и меньше, а рисовать автомобили всё ещё хочется. Двадцать шестой день октобит и моя очередная хитрость, тема - mechanic, так почему бы не нарисовать механическую игрушку? Старый добрый volkswagen beetle посвящается одному залёному жучку. Уже с трудом, но помню, были такие игрушки заводные с ключиком. Сейчас уже, наверное, таких и не встретишь, но когда-то они были очень популярны, хотя завода хватало ненадолго и двигались они строго по прямой.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцать седьмой. «Король (King)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/27.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Всё ещё хочется рисовать машинки и надо снова как-то выкручиваться, ибо тема двадцать седьмого дня - king. Так почему бы не нарисовать машину достойную короля? В этот раз выбор пал на англичан — Rolls Royce Silver Cloud. Кабриолет как нельзя лучше подходит для шествий. Времени как всегда не хватает, и оглядев «незамутнённым» взглядом можно тоже придраться к ляпам, руль не стой стороны, диски хромированные слишком тусклые, да и пропорции опять чуточку не выдержанны. Зато цвета похожи.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;День двадцать восьмой. «Панк (Punk)»&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2019.02/07 - Octobit 2018/28.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;День двадцать восьмой, тема Punk. Но душа опять хочет рисовать pixelart автомобили! Поэтому берём тему #cyberpunk2077 и реализовываем задуманное.&lt;/p&gt;

&lt;p&gt;Хочется сказать огромное спасибо Kreanym за Quadra V-Tech, без его &lt;a href=&quot;https://sketchfab.com/models/f31b2477e50f4fe284d80ea136c94d8e&quot;&gt;3D модельки&lt;/a&gt; пришлось бы тяжело.&lt;/p&gt;

&lt;p&gt;На этом собственно всё. Собачка почти вытянула этот дурдом, не дотянув всего пару работ. Что тут сказать. Рисовать в течении целого месяца достаточно сложно. С учётом того свободного времени есть только по вечерам, ну и может чуть больше по выходным, а ещё есть домашние дела ну и всего по чуть-чуть.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Лирический постсриптум (:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Интересное наблюдение. В основном новые работы публиковались на сайте «Светлой Академии» и в twitter, там же и больше всего было откликов. В tumbler очень сложная публика, реагирующая импульсивно, то на одну работу налетала толпа, а то был полный штиль. Очень странное впечатление от deviant art. Такое ощущение, что сайт просто умер. Очень редкие, считай залётные посетители.
Но больше всего мне конечно же не понравилось публиковаться на PixelJoint. Жуткое сообщество снобов, со своим монастырским «уставом». Каждая работа перепроверяется 100500 раз, неизвестный модератор может отклонить просто потому что ему показалось недостаточно «чистая» работа. Сайт древний как мамон и не понимает символы unicode, в результате чего некоторые работы пришлось обзывать строго латинскими буквами, как говорится без изысков.
Очень не понравились комментаторы на pixeljoint. Обычно на англоязычных ресурсах относительно лояльное комьюнити, всегда подскажут, расскажут помогут решить проблему.  А тут всё в стиле «хоть меня и не просили, но я просто обязан высказать своё мнение». Для меня это было весьма неприятным шоком.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ну и как «вишенка на торте», вскоре всем, у кого уровень ниже 2го, отключили вообще возможность комментировать работы. То есть я теперь даже как автор не могу написать ответ. Хотя это и объясняется тем, что якобы много спама на сайте, но выглядит это явно кране не дружелюбно по отношению к пользователям. Ведь в конце концов, если последние не будут там публиковать свои работы, смысла в сайте как таковом и нет.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Впрочем, никто вас не заставляет в нашу песочницу. Ясно, понятно.&lt;/p&gt;

&lt;p&gt;Но в любом случае, я надеюсь, что вам понравились мои pixelart-поделки. Спасибо за внимание.&lt;/p&gt;</content><author><name></name></author><category term="octobit" /><category term="inktober" /><category term="8bit" /><category term="pixelart" /><category term="story" /><summary type="html">И снова здравствуйте. Сегодня, мне бы хотелось посвятить пост небольшому отчёту об участии в ежегодном мероприятии — Octobit 2018. Это такого рода челендж, суть которого сводится к тому, чтобы рисовать каждый день на заданную тему.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/07%20-%20Octobit%202018/title.png" /></entry><entry><title type="html">Godot Начало</title><link href="https://murlab.github.io/blog/Godot%20Nachalo/" rel="alternate" type="text/html" title="Godot Начало" /><published>2018-05-16T23:55:00+03:00</published><updated>2018-05-16T23:55:00+03:00</updated><id>https://murlab.github.io/blog/Godot%20%D0%9D%D0%B0%D1%87%D0%B0%D0%BB%D0%BE</id><content type="html" xml:base="https://murlab.github.io/blog/Godot%20Nachalo/">&lt;p&gt;Всем привет!&lt;/p&gt;

&lt;p&gt;Давненько от меня не было слышно никаких новостей, тем более и повод соответствующий, наконец-таки поделится своими наработками по Godot, и уже аж версии 3!&lt;/p&gt;

&lt;p&gt;В этом вводном материале мы рассмотрим сам редактор, базовые элементы и немного затронем скрипты.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Скачать редактор можно как с &lt;a href=&quot;https://godotengine.org/download/windows&quot;&gt;официального сайта&lt;/a&gt;, так и установив через клиент &lt;a href=&quot;https://store.steampowered.com/&quot;&gt;Steam&lt;/a&gt; (кому как удобнее).&lt;/p&gt;

&lt;p&gt;Я буду использовать &lt;a href=&quot;https://store.steampowered.com/app/404790/Godot_Engine/&quot;&gt;версию из Steam&lt;/a&gt;, так как она позволяет одновременно работать как с версией 3, так и запускать версию 2.1. Забегая вперёд скажу, что в третьей версии очень многое поменялось, некоторая логика, вызовы в скриптах и т.д. Но обо всём по порядку.&lt;/p&gt;

&lt;p&gt;После запуска Godot, вы увидите окошко со списком доступных проектов. Их можно как запустить сразу, нажав кнопку «Запустить», так и открыть в редакторе, соответственно кнопка «Редактировать».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/01.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Примеры проектов можно скачать с &lt;a href=&quot;https://godotengine.org/showcase&quot;&gt;сайта Godot&lt;/a&gt;. Однако сразу обращу ваше внимание, что проекты, написанные под Godot 2.1 с большей долей вероятности не заработают из отличия в скриптах. Поэтому, при скачивании, обратите внимание на версию.&lt;/p&gt;

&lt;p&gt;После того как вы скачали и распаковали архив в какую-нибудь папку на диске, её нужно подключить к редактору. Нажимаем кнопку «Импорт», указываем путь, и нажимаем «Импортировать и Редактировать», после чего наши демо-проекты появятся в списке доступных.&lt;/p&gt;

&lt;p&gt;Так же демо-проекты можно посмотреть, выбрав вкладку «Шаблоны». Выбираем заинтересовавший нас проект, например, «2D Particles Demo». Нажимаем на название, и во вновь открывшемся окне устанавливаем (кнопка «Установить»).&lt;/p&gt;

&lt;p&gt;По сути можно сразу посмотреть проект в действии, кнопкой «Запустить». Однако может быть ситуация, как с «2D Particles Demo», когда для просмотра нужно его сначала всё-так открыть в редакторе для импорта некоторых компонентов.&lt;/p&gt;

&lt;p&gt;Думаю, с демо-примерами вы разберётесь самостоятельно, а мы создадим новый проект, нажав соответствующую кнопку. В вновь открывшемся окне у нас спросят название проекта и где мы хотим его разместить (пустая папка).&lt;/p&gt;

&lt;p&gt;Несмотря на то, что редактор Godot русифицирован, я всё же рекомендую задавать имена файлов латинскими буквами, дабы избежать проблем в будущем и не ломать голову почему у меня вылетают непонятные ошибки или вовсе не грузится, например, картинка.&lt;/p&gt;

&lt;p&gt;После создания проекта, у нас откроется сам редактор. Он состоит из нескольких блоков: Блок «Файловая система» — здесь располагаются блок навигации (дерево папок) и собственно все файлы нашего проекта; Блок «Сцена» — это структура (дерево) всех наших элементов на текущей сцене; Блок «Инспектор» — позволяет редактировать свойства и параметры выбранного элемента в дереве блока «Сцена».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/02.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ещё есть блоки «Импорт» и «Узел», но мы пока рассматривать их не будем.&lt;/p&gt;

&lt;p&gt;По центру расположен сам редактор, в зависимости от того что мы хотим редактировать он может отображать 2D-сцену, 3D-сцену, редактор скриптов, а также список доступных модулей (плагинов для самого Godot) — «AssetLib». Переключаются разделы нажатием на соответствующие надписи в верхней части.&lt;/p&gt;

&lt;p&gt;В нижней части редактора есть ещё один блок, который по умолчанию скрыт, и открывается только при возникновении каких-либо ошибок или отладке. Он состоит из четырёх вкладок: «Вывод» — различная информация самого редактора, в том числе ошибки; «Отладчик» — используется для отладки скриптов; «Аудио» и «Анимация» мы пока рассматривать не будем.&lt;/p&gt;

&lt;p&gt;Для того, чтобы скрыть это блок опять, достаточно нажать ещё раз на название раздела («Вывод», «Отладчик», «Аудио» или «Анимация»).&lt;/p&gt;

&lt;p&gt;Но вернёмся к редактору, по своей сути все элементы Godot это сцены, их можно сохранять, изменять тип, встраивать в другие сцены и т.д. Мы будем работать с 2D-сценами и использовать соответствующие для них типы элементов.&lt;/p&gt;

&lt;p&gt;Сначала создадим простой компонент, который будет у нас в будущем игроком. Для этого в блоке «Сцена» нажимаем плюс и во вновь открывшемся окошке ищем тип «KinematicBody2D» с иконкой в виде человечка. Его можно сразу найти задав фильтр в строке поиска или найти открыв дерево со списком компонентов: Node → CanvasItem → Node2D → CollisionObject2D → PhysicsBody2D → KinematicBody2D.  После чего нажимаем кнопку «Создать».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/03.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По своей сути мы могли бы выбрать и обычный элемент «Node2D», но у «KinematicBody2D» есть ряд свойств, которые нам понадобятся в будущем.&lt;/p&gt;

&lt;p&gt;После добавления элемента на сцену, рядом с названием появится желтый восклицательный знак, нажав на пиктограмму которого мы получим предупреждение:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/04.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Дело в том, что для того что бы наш игрок смог взаимодействовать с пространством у него должна быть задана область взаимодействия, ну и заодно нужно задать внешний вид игрока.&lt;/p&gt;

&lt;p&gt;Для начала переименуем наш компонент «KinematicBody2D» в «player». В последствии это имя будет использовано при отображении элементов на игровой сцене. (Для этого достаточно кликнуть на названии и откроется поле для ввода нового имени).&lt;/p&gt;

&lt;p&gt;Теперь необходимо добавить компонент, отвечающий за область взаимодействия или если быть точнее область обнаружения столкновений (Collision). Если у нас простой элемент или мы не хотим заморачиваться с высокой точностью, то подойдёт «CollisionShape2D». Если же у вас сложный, многогранный объект, то можно выбрать «CollisionPolygon2D».&lt;/p&gt;

&lt;p&gt;Я не буду усложнять материал, поэтому просто добавим компонент «CollisionShape2D». Выбираем наш элемент «player», нажимаем плюс и выбираем: Node → CanvasItem → Node2D → CollisionShape2D.&lt;/p&gt;

&lt;p&gt;И вновь получаем предупреждение с желтым восклицательным знаком:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/05.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Дело в том, что компонент мы добавили, а сама область так и не задана. Но прежде чем мы её добавим, нам понадобится ещё один элемент — Sprite. Это будет внешний вид нашего персонажа.&lt;/p&gt;

&lt;p&gt;Выбираем узел «player», нажимаем плюс и добавляем: Node → CanvasItem → Node2D → Sprite:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/06.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Как видите, в разделе «Недавние», появились наши ранее добавленные элементы. Гораздо быстрее, нежели искать однотипные элементы каждый раз.&lt;/p&gt;

&lt;p&gt;Теперь переключимся в блок «Файловая система», и нажав правую кнопку мыши на «res://» выберем пункт «Новая папка». В открывшемся окне введём название «images», здесь будут изображения, которые мы будет использовать в дальнейшем:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/07.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Откроем эту папку в проводнике (правая кнопка мыши на «images» и пункт «Просмотреть в проводнике». Теперь сюда нужно скопировать картинку для нашего игрока в формате PNG.&lt;/p&gt;

&lt;p&gt;Хочу обратить ваше внимание, что PhotoShop очень любит «пихать» в файлы системную информацию, и в частности задавать не совсем корректный «Color profile».  Из-за чего Godot начнёт ругаться на некорректный формат «sRGB profile»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/08.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В принципе вы конечно можете игнорировать данное сообщение, но я всё рекомендую очистить весь лишний «мусор». Сделать это можно, например, с помощью программы «&lt;a href=&quot;https://www.xnview.com/en/xnviewmp/&quot;&gt;XnView MP&lt;/a&gt;». Для этого на нашей картинке нажимаем правую кнопку мыши и в открывшемся меню выбираем «Пакетная обработка»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/09.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/10.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На вкладке действия нажимаем «Добавить действие» → Изображение → Удаление метаданных. Отмечаем все чекбоксы (галочки) и нажимаем преобразовать:&lt;/p&gt;

&lt;p&gt;После чего редактор Godot успокоится и перестанет ругаться на некорректный профиль. Честно сказать я не знаю с чем это связано, ибо такая же ситуация была и с версией 2.1. Возможно в будущем я разберусь подробнее с этим моментом.&lt;/p&gt;

&lt;p&gt;Но вернёмся в наш редактор и убедимся, что изображение нашего игрока находится на месте. Теперь это изображение нужно добавить к компоненту Sprite. Для этого выберем этот элемент в разделе «Сцена», и переключим своё внимание на раздел «Инспектор». В данный момент нас интересует свойство «Texture». Изначально там указано значение &lt;Null&gt;. Нас интересует «Новый ImageTexture». Можно выбрать его из меню, а можно сразу перетащить нашу картинку из блока «Файловая система» и отпустить над свойством «Texture»:&lt;/Null&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/11.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После чего увидим, что в главном окне редактора у нашего «player» появилась форма в виде нашей картинки:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/12.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/13.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сразу хочу обратить ваше внимание вот на какой момент. Если вы планируете использовать графику в стиле pixeart, то вам вполне вероятно понадобится отключить сглаживание. В противном случае ваша картинка будет «мутная».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/14.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для этого, в блоке «Инспектор», выбираем нашу текстуру, и в открывшемся меню выбираем пункт «Редактировать»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/15.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В разделе «Flags» снимаем все чекбоксы (галочки) и убеждаемся, что грани нашего кубика больше не сглаживаются.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/16.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для того, чтобы не повторять эту процедуру каждый раз, откроем блок «Импорт», снимем чекбокс (галочку) напротив «Flags». Затем нажимаем на «Предустановка..» и выбираем «Установить по умолчанию для ‘Texture’»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/17.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь при импорте новых картинок редактор не будет выставлять флаги.&lt;/p&gt;

&lt;p&gt;Вернёмся к блоку «Сцена» и добавим наконец область взаимодействия. Для этого выберем наш компонент «CollisionShape2D» и блоке «Инспектор» зададим свойство «Shape» в виде «Новый RectangleShape2D»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/18.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Просто квадратная область. Поскольку изображение нашего игрока всего 32 на 32 точки, то область задать будет несколько проблематично:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/19A.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но можно с помощью колеса мыши приблизить изображение и выставить область таким образом, чтобы она покрывала весь спрайт персонажа:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/19B.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Можно пойти несколько другим способом и не мучатся, тягая мышкой точки. Открываем в блоке «Инспектор» раздел «Transform» и задаём свойство Scale:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/20.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Честно сказу в редакторе Godot очень много непонятных моментов, например, почему свойство именно scale (масштаб), а ни, например, просто дать возможность указать точный размер области. Или глобальная область первичного объекта (в данном случае «player») она равна 64 на 64 точки и изменить её нельзя, даже если у нас спрайт размером меньше. Честно скажу это весьма неудобно в некоторых случаях. А на англоязычных форумах предлагают модифицировать основные классы прямо внутри Godot и задавать там размер. К сожалению, с ходу у меня это не получилось сделать.&lt;/p&gt;

&lt;p&gt;Но вернёмся к нашему игроку. По сути базовые настройки завершены, и мы можем сохранить нашу сцену уже как компонент «player». Для этого в блоке «Файловая система» создадим ещё одну папку и назовём её «elements». Теперь в главном меню редактора выберем «Сцена» → «Сохранить сцену как…» и выбрав нашу папку «elements» сохраним файл «player.tscn»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/21.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь нам нужно создать главную игровую сцену. Для этого в том же главном меню «Сцена» выбираем пункт «Новая сцена». В блоке «Сцена» нажимаем плюс и выбираем компоненту «Node»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/22.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;По сути это базовый компонент, прародитель всех остальных и нам от него ничего не потребуется (пока). Единственное, что переименуем его в «gamescene». Теперь нам на игровую сцену нам нужно добавить нашего игрока. Для этого кликнем на «gamescene» и затем нажмём на пиктограмму в виде звена цепи (рядом с плюсом) и во вновь открывшемся окне выберем: «elements → player.tscn».&lt;/p&gt;

&lt;p&gt;Как не трудно догадаться звено цепи прикрепляет к сцене элемент в виде нашего игрока. Причём если мы потом захотим что-либо изменить в «player», то этим изменения так же отобразятся на игровой сцене. Это очень удобно, так как таких элементов может быть очень много на сцене и отдельно редактировать каждый из компонентов очень утомительно.&lt;/p&gt;

&lt;p&gt;Компонент «player» можно спокойно перемещать мышкой в нужное место, но мы пойдём немного дальше и включим сетку и сделаем перемещение дискретное. Для этого в основном блоке редактора нажмём обзор и включим «Показать сетку». По сути её можно в любой момент включать/отключать с помощь горячих клавиш — G:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/23.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь настроим размер ячеек кратное нашему игроку. Для этого нажмём на пиктограмму в виде трёх вертикальных точек и выберем пункт «Настроить привязку…»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/24A.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;И укажем размер ячеек 32 на 32:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/24B.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь надо активировать привязку нажав на пиктограмму в виде магнита:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/25.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Так же можно переключать это режим с помощью горячей клавиши — S.&lt;/p&gt;

&lt;p&gt;Как мы видим на скриншоте выше наш игрок попадает на пересечение ячеек и это не есть совсем хорошо:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/26.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для того что бы наш персонаж был чётко посредине ячейки, откроем его на редактирование нажав на пиктограмму в виде «Хлопушки-нумератора»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/27.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь изменим свойства позиционирования в блоке «Инспектор», сначала для Srpite:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/28.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В подразделе «Offset» снимаем чекбокс (галочку) рядом со свойством «Centered».&lt;/p&gt;

&lt;p&gt;Затем у элемента «CollisionShape2D» в подразделе «Position» задаём смещение (16, 16) на половину размера нашего спрайта:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/29.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Сохраняем сцену (Ctrl+S) с «player.tscn» и переключаемся на нашу игровую сцену:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/30.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Проверяем, что наш персонаж точно по середине ячейки, хоть и общий контур больше (64x64) и сохраним игровую сцену. Создадим ещё одну папку «scenes» в «res://» и сохраним туда «gamescene.tscn».&lt;/p&gt;

&lt;p&gt;Теперь самое время проверить всю нашу конструкцию в действии. Для этого выберем в верхнем меню справа нажмём кнопку «play» или горячую клавишу — «F5».&lt;/p&gt;

&lt;p&gt;Редактор сообщит, что не выбрана главная сцена и предложит её указать. Нажимаем «Выделение» и выбираем «gamescene.tscn»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/31.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После чего откроется окно с игрой, и мы увидим наш квадратик с персонажем.&lt;/p&gt;

&lt;p&gt;Теперь попробуем задать управление с помощью клавиатуры и рассмотрим базовые элементы скриптов. Сначала нам нужно задать сами клавиши.&lt;/p&gt;

&lt;p&gt;Для этого откроем в главном меню: «Проект» → «Параметры проекта».  Во вновь открывшемся окне на закладке «Список действий» мы увидим большой список. Можно использовать уже готовые элементы списка, но мы создадим четыре своих: «player_up», «player_down», «player_left», «player_right». Вставляем поочерёдно названия и нажимаем кнопку «Добавить»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/32A.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Это будут четыре события, по каждой стороне перемещения. Теперь надо задать условия, при котором будет происходить сработка события. Нажимаем плюс и выбираем «кнопка», после чего откроется окошко и нам предложат нажать кнопку на клавиатуре. По такому же принципу можно задать кнопку у геймпада или мыши:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/32B.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Я буду нажимать кнопки управления курсором, но вы можете назначить их по своему усмотрению, например, WASD. В результате чего должна получится такая вот картина:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/33.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь создадим ещё одну папку в разделе «res://» для скриптов — «scripts». После чего открываем на редактирование нашу сцену «player.tscn».  Выбираем главный узел «player» и нажимаем пиктограмму в виде свитка с зелёным плюсиком или же можно нажать правую кнопку на узле «player» и выбрать «Прикрепить скрипт»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/34.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Во вновь открывшемся окне оставляем все настройки по умолчанию, и изменим лишь наш путь к расположению скрипта, дабы не делать в будущем свалку:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/35.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После нажатия кнопки «Создать» откроется редактор с нашим скриптом, с шаблоном по умолчанию. Несколько слов о самом редакторе:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/36.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;В &lt;strong&gt;области 1&lt;/strong&gt; находятся открытые скрипты проекта, в данный момент он один — &lt;em&gt;player.gd&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;В &lt;strong&gt;области 2&lt;/strong&gt; находится список функций данного скрипта. На этапе создания она тоже одна это &lt;em&gt;_ready()&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;В &lt;strong&gt;области 3&lt;/strong&gt; (начало скрипта) указан класс на базе которого основан данный скрипт. В данном примере это &lt;em&gt;KinematicBody2D&lt;/em&gt;. У каждого класса свой функционал и надо быть внимательным.&lt;/li&gt;
  &lt;li&gt;В области 4 перечисляются локальные переменные доступные внутри этого скрипта. Несмотря на то, что тип переменной не указан явно (var), они типизированы и для того, чтобы склеить строку и число, придётся привести к одному типу. Например “lives: “ + String(10);&lt;/li&gt;
  &lt;li&gt;Далее в &lt;strong&gt;области 5 и 6&lt;/strong&gt; следуют функции. У зарезервированных функций имена начинаются со знака подчёркивания. В выше указанном примере функция &lt;em&gt;_ready()&lt;/em&gt; вызывается 1 раз когда элемент добавляется на сцену, или проще говоря инициализируется. Если функция пустая, для того чтобы не было ошибки вставляется «заглушка» в виде вызова &lt;em&gt;pass&lt;/em&gt;. Функция &lt;em&gt;_process&lt;/em&gt; вызывается каждый фрейм (кадр), но только если предварительно была разрешена командой &lt;em&gt;set_process(true)&lt;/em&gt; в функции &lt;em&gt;_ready()&lt;/em&gt;. Причём при каждом вызове функции &lt;em&gt;_process&lt;/em&gt; в переменной &lt;em&gt;delta&lt;/em&gt; будет некое число (прирост) с момента предыдущего вызова. Это значение можно использовать как таймер для каких-либо действий в будущем;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Проведём небольшой эксперимент. Разрешим вызов &lt;em&gt;set_process(true)&lt;/em&gt;, а в функции &lt;em&gt;_process&lt;/em&gt; добавим вывод в консоль отладки значение &lt;em&gt;delta&lt;/em&gt; в консоль:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/37A.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь после запуска проекта (F5) мы получим кучу быстро сменяющихся цифр:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/37B.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ура! Всё работает! Но нам нужно добавить управление нашим кубиком. Сразу скажу, что приведённый метод не очень хорош, но как базовая демонстрация вполне сгодится. В моих проектах используется более корректный опрос, но он несколько сложен, а мне бы не хотелось перегружать и так достаточно большую статью.
Итак, для того, чтобы сработал наш опрос кнопок необходимо на этапе инициализации добавить несколько переменных:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;var direction = Vector2()
var speed = 0
const MAX_SPEED = 400
var velocity = Vector2()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;direction&lt;/em&gt;&lt;/strong&gt; — это двумерный вектор направления в какую сторону будет двигаться наш персонаж: (-1,0) влево, (1,0) вправо, (0,-1) вверх, (0,1) вниз. Возможны комбинации, например, для движения по горизонтали вверх и влево (-1,-1);&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;speed&lt;/em&gt;&lt;/strong&gt; — текущая скорость перемещения нашего персонажа, изначально равно 0 (он стоит);&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;MAX_SPEED&lt;/em&gt;&lt;/strong&gt; — константа, максимальная скорость с которой будет двигаться персонаж;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;velocity&lt;/em&gt;&lt;/strong&gt; — ещё одни двумерный вектор, в нём хранится текущее направление движения с учётом скорости;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Теперь опишем функционал в &lt;em&gt;_process&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Инициализируем(сбрасываем) направление движения (0,0):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Python&quot;&gt;direction = Vector2()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь опрашиваем события для кнопок влево/вправо:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Python&quot;&gt;if Input.is_action_pressed(&quot;player_left&quot;):
	direction.x = -1
elif Input.is_action_pressed(&quot;player_right&quot;):
	direction.x = 1 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Если одна из них нажата задаём горизонтальное направление.&lt;/p&gt;

&lt;p&gt;Повторяем эту же процедуру для вертикального движения:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Python&quot;&gt;if Input.is_action_pressed(&quot;player_up&quot;):
	direction.y = -1
elif Input.is_action_pressed(&quot;player_down&quot;):
	direction.y = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если вектор движения задан (не равен 0,0), то выставляем максимальную скорость движения, в противном случае она равна нулю:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Python&quot;&gt;if direction != Vector2():
	speed = MAX_SPEED
else:
	speed = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь рассчитываем движение с учётом направления и скорости:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Python&quot;&gt;velocity = speed * direction.normalized()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ну и далее собственно заставляем двигаться сам объект:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Python&quot;&gt;move_and_slide (velocity)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В результате чего у нас должна получится вот такая картинка:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.05/16 - Godot Nachalo/38.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;А после запуска наш квадратик гоняется по экрану с помощью клавиш курсора.&lt;/p&gt;

&lt;p&gt;На этом собственно всё. Не хочу сильно перегружать вводную часть. В следующий раз мы рассмотрим столкновения и более подробно поговорим о GDScript.&lt;/p&gt;

&lt;p&gt;Удачи в ваших начинания, а готовый проект можно скачать по &lt;a href=&quot;/downloads/godot/test_01.zip&quot;&gt;ссылке&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="godot engine" /><category term="godot 3" /><category term="gdscript" /><category term="уроки" /><summary type="html">Всем привет!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/16%20-%20Godot%20Nachalo/title.png" /></entry><entry><title type="html">RMMV Tools</title><link href="https://murlab.github.io/blog/RMMV%20Tools/" rel="alternate" type="text/html" title="RMMV Tools" /><published>2018-02-04T17:44:00+03:00</published><updated>2018-02-04T17:44:00+03:00</updated><id>https://murlab.github.io/blog/RMMV%20Tools</id><content type="html" xml:base="https://murlab.github.io/blog/RMMV%20Tools/">&lt;p&gt;KageDesu поднял интересную тему &lt;a href=&quot;http://rpgmaker.ru/&quot;&gt;светлой&lt;/a&gt; — «в чём вы создаёте и редактируете плагины для RPG Maker MV»?&lt;/p&gt;

&lt;p&gt;Так уж повелось, что плагины я создаю в редакторе «&lt;a href=&quot;http://brackets.io/&quot;&gt;Brackets&lt;/a&gt;», однако по сути, кроме раскраски и некоторых небольших плюшек он ничем не лучше и не хуже других. По сути можно и в блокноте писать.&lt;/p&gt;

&lt;p&gt;Но захотелось мне немного расширить его функционал, с точки зрения удобства именно для создания плагинов для RPG Maker MV. Попробовать, так сказать свои силы в написании плагинов, но уже для самого этого «Brackets».&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Замахиваться на что-то грандиозное было бы глупо, тем более что времени свободного не так много, так что пробная версия плагина проста до безобразия.&lt;/p&gt;

&lt;p&gt;После установки плагина, в верхней части меню появится ещё один пункт «RMMV Tools»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/04 - RMMV Tools/1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Пока в нём всего два пункта: пункт настроек и пункт создания нового плагина.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/04 - RMMV Tools/2.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В настройках мы задаём параметры по умолчанию: имя автора плагинов и ссылку на страничку автора.
Эти данные будут использоваться в шаблоне и в имени файла плагина, так что имя автора надо указать латинскими буквами, дабы избежать проблем в будущем.&lt;/p&gt;

&lt;p&gt;Выбрав пункт меню «Новый плагин» или нажав Ctrl+Shift+N, у нас откроется окно с параметрами:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/04 - RMMV Tools/3.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для начала нужно задать название нашего плагина. Тоже латинскими буквами, так как это будет использовано в имени файла.&lt;/p&gt;

&lt;p&gt;Затем выбираем лицензию, под которой мы планируем выпустить свой плагин. Список взят с GitHub. Если вы не хотите заморачиваться этими вопросами, может выбрать пункт «Неизвестно, либо не задано».&lt;/p&gt;

&lt;p&gt;Далее укажем где и при каких условиях можно использовать наш плагин: для коммерческих, бесплатных или и то, и то. Опять же если вы ни хотите ничего никому говорить, оставляем пункт — «нет».&lt;/p&gt;

&lt;p&gt;При желании можно сделать небольшое описание плагина.&lt;/p&gt;

&lt;p&gt;Поддержка языков, используется для создания блока параметров плагина.&lt;/p&gt;

&lt;p&gt;Если выбрано «Всё вместе», то будет создан только один блок параметров, без указания конкретных языков.
Если же выбрано «Независимо», то для каждого выбранного языка ниже, будет создан свой блок параметров.&lt;/p&gt;

&lt;p&gt;Ну и как это всё выглядит после нажатия кнопки OK:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/04 - RMMV Tools/4.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Кнопка OK не будет активна пока не будет задано имя. Параметры, выбранные при создании предыдущего плагина, сохраняются в редакторе, и автоматически проставляются при создании нового. В результате чего не надо каждый раз заново выбирать лицензию или другие настройки.&lt;/p&gt;

&lt;p&gt;Ну собственно пока и всё, будем считать, что это такая пробная версия.&lt;/p&gt;

&lt;p&gt;Если кому интересно посмотреть, как всё это устроено внутри, что добро пожаловать на &lt;a href=&quot;https://github.com/murlab/brackets-plugins/tree/master/RMMV%20Tools&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Скачать готовый архив можно в разделе — &lt;a href=&quot;https://github.com/murlab/brackets-plugins/tree/master/RMMV%20Tools/releases&quot;&gt;releases&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="brackets" /><category term="plugins" /><category term="javascript" /><summary type="html">KageDesu поднял интересную тему светлой — «в чём вы создаёте и редактируете плагины для RPG Maker MV»?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/04%20-%20RMMV%20Tools/plugin_title.png" /></entry><entry><title type="html">Event Move Speed</title><link href="https://murlab.github.io/blog/Event%20Move%20Speed/" rel="alternate" type="text/html" title="Event Move Speed" /><published>2018-02-01T16:50:00+03:00</published><updated>2018-02-01T16:50:00+03:00</updated><id>https://murlab.github.io/blog/Event%20Move%20Speed</id><content type="html" xml:base="https://murlab.github.io/blog/Event%20Move%20Speed/">&lt;div class=&quot;dictum&quot;&gt;«Эх, давно не брал я в руки шашек» © Василий Иванович&lt;/div&gt;

&lt;p&gt;Итак по просьбе многоуважаемого Котè (он же PanzerCat) удалось выдушить из меня пару строк на ruby, а именно скрипт — «Event Move Speed»&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Как ясно из названия данный скрипт позволяет задать для отдельно взятого события(event) на карте произвольную скорость перемещения. В частности, Котè хотел, чтобы ивент буквально ползал по карте. К сожалению стандартными средствами этот вопрос было не решить, ибо скорость перемещения оставалась всё ровно очень большая.&lt;/p&gt;

&lt;p&gt;Скрипт просто до безобразия. Создаём необходимый нам event, прописываем в первой строчке комментарий вида &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;speed: NN&amp;gt;&lt;/code&gt; где NN число с плавающей точкой. Значение 0 стандартная скорость перемещения (с учётом настроек). Если задать число меньше нуля скорость будет падать. Подобрать можно экспериментальным путём, например -1.5 или даже -3.5 даёт вполне ползающую тушку. Если значение увеличить (вдруг кому надо) ивент будет «летать».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/01 - Event Move Speed/1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/01 - Event Move Speed/2.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Дабы персонаж не спотыкался на каждом шаге в обязательно порядке надо установить частоту обновления (Freq:) на максимальное значение.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Небольшое дополнение:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;Поскольку изначально мы с Котè не совсем поняли друг дружку. Скрипт немного доработан:&lt;/p&gt;

&lt;p&gt;Теперь помимо скорости перемещения, можно задать задержку для кадров анимации, с помощью команды &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nextframe: NN&amp;gt;&lt;/code&gt; где NN число которое будет прибавляться для смены следующего кадра. По умолчанию оно равно 1, но, если, например, задать значение 0.1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.02/01 - Event Move Speed/3.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;то мышка будет ну ооооочень медленно махать крыльями.&lt;/p&gt;

&lt;p&gt;Скачать свежую версию как всегда можно на &lt;a href=&quot;https://github.com/murlab/rpg-maker-vx-ace-scripts/tree/master/Event%20Move%20Speed&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="rpg maker vx ace" /><category term="scripts" /><category term="ruby" /><summary type="html">«Эх, давно не брал я в руки шашек» © Василий Иванович</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/01%20-%20Event%20Move%20Speed/plugin_title.png" /></entry><entry><title type="html">RMMV Event Hero</title><link href="https://murlab.github.io/blog/RMMV%20Event%20Hero/" rel="alternate" type="text/html" title="RMMV Event Hero" /><published>2018-01-30T17:55:00+03:00</published><updated>2018-01-30T17:55:00+03:00</updated><id>https://murlab.github.io/blog/RMMV%20Event%20Hero</id><content type="html" xml:base="https://murlab.github.io/blog/RMMV%20Event%20Hero/">&lt;p&gt;Нян!&lt;/p&gt;

&lt;p&gt;По просьбе Петра (с «&lt;a href=&quot;http://rpgmaker.su&quot;&gt;нейтралки&lt;/a&gt;») быстро родился такой вот небольшой плагин — «MUR Event Hero».&lt;/p&gt;

&lt;p&gt;Если внутри события (event) задать комментарий вида &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;hero: ID&amp;gt;&lt;/code&gt;, где ID это номер (ID) героя в системе, то в этот event скопируется графика из этого героя.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Например, комментарий:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/30 - RMMV Event Hero/1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Означает, что как только будет активирован данный шаг события, будет загружена графика из героя с номером 1:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/30 - RMMV Event Hero/2.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Шагов может быть неограниченное количество, и в каждом может быть указан свой &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;hero&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Если указан неправильный ID героя, то консоль получим сообщение об ошибке, но игра не будет «блокироваться», просто не загрузится новая графика.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/30 - RMMV Event Hero/3.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Если у героя не задана картинка, то и у события тоже вместо картинки будет пустота.&lt;/p&gt;

&lt;p&gt;Посмотреть этот плагин в действии, а также некоторые другие можно на моём &lt;a href=&quot;https://murplay.github.io/&quot;&gt;online-полигоне&lt;/a&gt; :3&lt;/p&gt;

&lt;p&gt;Скачать свежую версию как всегда можно на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Event%20Hero&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="rpg maker mv" /><category term="plugins" /><category term="javascript" /><summary type="html">Нян!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/30%20-%20RMMV%20Event%20Hero/plugin_title.png" /></entry><entry><title type="html">RMMV Awesome Battleground</title><link href="https://murlab.github.io/blog/RMMV%20Awesome%20Battleground/" rel="alternate" type="text/html" title="RMMV Awesome Battleground" /><published>2018-01-08T19:55:00+03:00</published><updated>2018-01-08T19:55:00+03:00</updated><id>https://murlab.github.io/blog/RMMV%20Awesome%20Battleground</id><content type="html" xml:base="https://murlab.github.io/blog/RMMV%20Awesome%20Battleground/">&lt;p&gt;И снова всем привет!&lt;/p&gt;

&lt;p&gt;В конце октября, начале ноября прошлого года на «Светлой Академии» проходил конкурс плагинов для RPG Maker. Конкурс проходил первый раз и как организатору данного мероприятия мне было немного боязно, что работ будет очень мало, если вообще будут.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;По этой причине, по большей части для массовки, мной был написан плагин «Awesome Battleground». Но случилось чудо, работ было предоставлено аж двенадцать штук, а моя работа разделила второе место, с чем себя и поздравляю.&lt;/p&gt;

&lt;p&gt;И сегодня мне бы хотелось рассказать немного подробнее о своей работе.&lt;/p&gt;

&lt;p&gt;По умолчанию в RPG Maker MV фоновое изображение для битвы, а также музыку можно задать только для всей карты. Да её можно изменить с помощью команд, но придётся это делать для каждого события на карте, это честно скажу немного утомительно. А как быть если противник двигается по карте? Тут он стоит на песочке, а тут уже переходит реку по мосту, а затем уже в лесу? Писать сложную логику и каждый раз задавать картинки?&lt;/p&gt;

&lt;p&gt;Что бы избавить разработчика от «головной боли» и был изначально придуман плагин «Awesome Battleground».  На карте можно промаркировать зоны и в зависимости от цифры задать какое фоновое изображение, и музыка будут тут использованы:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/regions.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Так же номер зоны можно изменить в любой момент командой плагина «setcurrentregionid NN» прямо в диалогах, где NN номер региона. Например, после общения с противником мир вокруг главного героя меняется и начинается битва. Главное не забыть по окончании вернуть значение региона на 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/example.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но на этом идея не остановилась и захотелось немного приукрасить оформление. К сожалению, в RPG Maker вообще очень много статичных картинок, поэтому было решено добавить немного динамичности, а именно помимо двух стандартных добавилось ещё два слоя для параллаксов. А также возможность разместить элементы анимации:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/layers.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Для каждого слоя параллаксов можно задать один из эффектов, а точнее способ поведения изображения на экране:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Зацикленные движения:
    &lt;ul&gt;
      &lt;li&gt;вверх&lt;/li&gt;
      &lt;li&gt;вниз&lt;/li&gt;
      &lt;li&gt;влево&lt;/li&gt;
      &lt;li&gt;вправо&lt;/li&gt;
      &lt;li&gt;вверх влево&lt;/li&gt;
      &lt;li&gt;вверх право&lt;/li&gt;
      &lt;li&gt;вниз влево&lt;/li&gt;
      &lt;li&gt;вниз вправо&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Движение в виде маятника:
    &lt;ul&gt;
      &lt;li&gt;вверх-вниз&lt;/li&gt;
      &lt;li&gt;влево-вправо&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Произвольные движения:
    &lt;ul&gt;
      &lt;li&gt;зигзагом&lt;/li&gt;
      &lt;li&gt;по часовой стрелке&lt;/li&gt;
      &lt;li&gt;против часовой стрелки&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Проявление (fade in) и затухание (fade out)&lt;/li&gt;
  &lt;li&gt;Мерцание&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Для зацикленных движений создаётся дубликат картинки и в зависимости от направления движения он располагается либо справа, либо снизу. Для движений по кругу создаётся 4 копии картинок, так что важно, чтобы они аккуратно стыковались (как например 3D текстуры) без швов. В противном случае это будет выглядеть не аккуратно.&lt;/p&gt;

&lt;p&gt;Проявление и затухание — это одинарная картинка, которая плавно проявляется и исчезает с помощью изменения значения альфа-канала.&lt;/p&gt;

&lt;p&gt;Так же в параметрах слоя параллакса можно задать скорость с которой будет двигаться слой, а также (при необходимости) можно задать задержку перед повтором. Например, можно выбрать что слой будет двигаться циклически вверх, но перед повторным движением будет выжидаться пауза.&lt;/p&gt;

&lt;p&gt;Помимо двух слоёв параллаксов, можно добавить на сцену анимацию. Всего можно указать четыре вида анимации, но с неограниченным количеством координат на экране. Основная идея была задать один вид анимации и продублировать их несколько раз на экране. Причём помимо координат задаётся ещё номер кадра с которого начинать, в результате чего анимация уже не выглядит как синхронные «китайские болванчики».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/animation.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Немаловажным нововведением плагина, является возможность вместе с музыкой задать шумовой эффект (чириканье птичек, раскаты грома итд). Ну и конечно можно задать уровень громкости, как музыки, так и шумовых эффектов.&lt;/p&gt;

&lt;p&gt;Так же в плагине есть небольшое дополнение, позволяющий задать размер экрана. В отличии от многих других аналогичных, он корректно расставляет участников боя, если размер экрана больше 816x624. А также может учитывать соотношение сторон 16:9 или 4:3, что позволяет избавится от чёрных полосок по бокам в полноэкранном режиме. Если вам это не нужно или у вас есть другие планы, реализовывающие этот функционал, данную опцию можно отключить.&lt;/p&gt;

&lt;p&gt;К сожалению, для многих оказались не вполне понятно, как его настраивать. Поэтому остановимся немного подробнее на настройке параметров плагина.&lt;/p&gt;

&lt;p&gt;Начиная с версии RPG Maker MV 1.5.x появилась возможность, более продвинутой настройке плагинов. Но она же порой и вносит ещё большую путаницу, поскольку имеет много уровней вложенности и сразу не понятно, как куда попасть и где что расположено.&lt;/p&gt;

&lt;p&gt;Начнём с главной части настроек. Здесь всё просто, выбираем интересующий нас раздел, кликаем на него и открывается окно с настройками:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/params_01.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Далее откроем меню с настройками для регионов, нажав на соответствующий пункт «Настройки для регионов». Пусть вас не пугает огромный список на скриншоте, изначально он будут пуст и для каждого региона вы должны задать свои настройки. Для этого делаем двойной клик мышкой на пустой строчке и откроется окошко для настройки нового региона:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/params_02.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Здесь тоже относительно всё просто. Вначале нам нужно задать номер региона, который мы хотим настроить. Если выбрать 0, то будут настройки по умолчанию, когда регион не указан на карте. Если не создать такую запись, то на территории, где не задан номер региона будет стандартный фон для битвы на данной карты, без плюшек плагина «Awesome Battleground».&lt;/p&gt;

&lt;p&gt;После того как мы указали номер региона, нам нужно выбрать две картинки: заднего фона (battleground) и переднего (foreground). Картинки используются не из стандартной поставки RPG Maker, поэтому их нужно расположить в «img/fx_background» и «img/fx_foreground» соответственно. Примеры таких картинок вы можете найти в полном проекте.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/images.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На этом собственно базовая настройка и завершена. Если же мы хотим добавить в сцену динамичности, можно настроить ещё 2 параллакса.&lt;/p&gt;

&lt;p&gt;Изображение с заготовками параллаксов должно быть предварительно скопировано в папку «img/fx_parallax».
Далее выбираем эффект как себя вести изображению (двигаться, проявляться или мерцать). Также указываем скорость с которой будет двигаться наше изображение для параллакса.&lt;/p&gt;

&lt;p&gt;Для достижения эффекта параллакса, и в зависимости от выбранного эффекта, изображение будет дублироваться в памяти по горизонтали и/или вертикали. Это стоит учитывать при создании бесшовных изображений.&lt;/p&gt;

&lt;p&gt;По умолчанию эффект применяется постоянно, например, плывут облака по кругу. Но при необходимости, после того, как изображение сместиться на всю свою ширину (высоту) можно задать задержку «Повторить через». Как например это сделано в сцене с роботом, забор двигается постоянно, а фонари там двигаются с интервалами.&lt;/p&gt;

&lt;p&gt;При необходимости повторяем все настройки и для второго параллакса.&lt;/p&gt;

&lt;p&gt;При желании на сцене можно разместить анимационные элементы, как например огонь в сцене с шахтой или подводные растения. Всего видов анимации доступно четыре, но количество на сцене ограниченно лишь вашей фантазией и здравым смыслом.&lt;/p&gt;

&lt;p&gt;Изображение для анимации представляет из себя файл с кадрами, располагающимися друг за другом по вертикали. Файл должен быть скопирован в «img/fx_animation». Затем в параметрах указываем из сколько кадров будет состоять наша анимация, а также задержку между кадрами. Например, если анимация состоит из 50 кадров, то задержка будет 0, если из 25-ти, то уже 1, а для 17 может быть и 3. В любом случае подбирается значение индивидуально.&lt;/p&gt;

&lt;p&gt;Так же можно задать значение «Реверс», если хотим, чтобы анимация повторялась по кругу не с 1 кадра, а возвращалась в обратном порядке.&lt;/p&gt;

&lt;p&gt;После того, как закончили с настройкой анимации, переходим к её размещению на экране. К сожалению, в RPG Maker MV нет встроенных средств, поэтому координаты на экране придётся задавать вручную, указывая положение X и Y.&lt;/p&gt;

&lt;p&gt;Для этого так же делаем двойной клик мышкой на поле «Положение». Откроется ещё одно окно со списком координат. Для создания нового положения анимации на экране так же делаем двойной клик мышкой на пустой вкладке:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/params_03.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Помимо координат на экране, можно задать номер кадра с которого начать анимацию. Причём для каждого нового положения на экране можно задать своё значение. В результате чего анимация не будет выглядеть как «синхронное плавание», а создаст некоторое подобие разнообразия.&lt;/p&gt;

&lt;p&gt;Как уже было сказано выше, ограничения на количество таких анимаций нет, но не стоит всё-таки сильно увлекаться, ибо не у всех компьютеры достаточно быстрые и велик риск того, что сцена боя превратится буквально в «пошаговую стратегию».&lt;/p&gt;

&lt;p&gt;По аналогии задаются настройки и для остальных трёх анимаций.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2018.01/08 - RMMV Awesome Battleground/params_04.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В конце есть ещё несколько пунктов настроек звуков для региона, с которыми, я надеюсь, вы без труда разберётесь сами.&lt;/p&gt;

&lt;p&gt;В качестве демонстрации скромных возможностей плагина было сделано это видео:&lt;/p&gt;

&lt;iframe width=&quot;850&quot; height=&quot;498&quot; src=&quot;https://www.youtube.com/embed/eecgqzTflIU&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Одним из дополнительных условий конкурса был «красивый» и понятный код, скрипт по возможности наполнен комментариями, что, где и на какой строке происходит. Сейчас это не актуально, поэтому если вам не интересно разбираться с внутренностями скрипта, можно скачать «чистую» версию с настройкой параметров на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/blob/master/Awesome%20Battleground/%5BRU%5D%20MUR_AwesomeBattleground.js&quot;&gt;русском&lt;/a&gt; и &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/blob/master/Awesome%20Battleground/%5BEN%5D%20MUR_AwesomeBattleground.js&quot;&gt;английском&lt;/a&gt; языках. Если же интересно разобраться, что и как устроено, можно скачать &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/blob/master/Awesome%20Battleground/%5BRU%5D%20MUR_AwesomeBattleground%20(with%20comments).js&quot;&gt;версию с комментариями&lt;/a&gt;. В любом случае главное не забыть переименовать файл в виде «MUR_AwesomeBattleground.js» иначе плагин не увидит свои настройки и вывалится с ошибкой.&lt;/p&gt;

&lt;p&gt;Все версии как обычно доступны на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Awesome%20Battleground&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;А так же можно теперь посмотреть версию плагина &lt;a href=&quot;https://murplay.github.io/&quot;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Если вам не совсем понятно как настраивать плагин, то можете &lt;a href=&quot;https://cloud.mail.ru/public/H2VU/ekPoQc4vq&quot;&gt;скачать готовый проект&lt;/a&gt; (~172Mb) для RPG Maker MV, который чуть выше демонстрируется на видео.&lt;/p&gt;</content><author><name></name></author><category term="rpg maker mv" /><category term="plugins" /><category term="javascript" /><summary type="html">И снова всем привет!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/08%20-%20RMMV%20Awesome%20Battleground/plugin_title.png" /></entry><entry><title type="html">Своя страничка на github</title><link href="https://murlab.github.io/blog/Svoja%20stranichka%20na%20github/" rel="alternate" type="text/html" title="Своя страничка на github" /><published>2017-12-31T19:00:00+03:00</published><updated>2017-12-31T19:00:00+03:00</updated><id>https://murlab.github.io/blog/Svoja%20stranichka%20na%20github</id><content type="html" xml:base="https://murlab.github.io/blog/Svoja%20stranichka%20na%20github/">&lt;p&gt;Новогодний привет всем!&lt;/p&gt;

&lt;p&gt;Сегодня, в последний день уходящего года, мне бы хотелось… нет, не подведения итогов (: а поделится более ценной информацией, а именно как завести свою страничку, сайт на &lt;a href=&quot;https://pages.github.com/&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Для чего это может понадобится? Ну, возможно вам захочется просто делится какой-нибудь информацией, как мне, например. Можно конечно и просто сделать файловый архив своих проектов, хотя конечно авторы и не приветствуют такие «свалки». Но самое главное можно сделать онлайн версию игры на RPG Maker, как это уже было описано ранее.&lt;/p&gt;

&lt;p&gt;В отличии от «приключений» с тем же &lt;a href=&quot;https://www.google.com/intl/ru_ALL/drive/&quot;&gt;google drive&lt;/a&gt;, как мы это делали в «&lt;a href=&quot;/blog/Zapuskaem proekt v brauzere/&quot;&gt;Запускаем проект в браузере&lt;/a&gt;», здесь нам не придётся прибегать к каким-то хитроумным действиям, всё до боли просто и понятно. Хотя конечно, как и в любом деле, есть свои нюансы. Но обо всём по порядку.&lt;/p&gt;

&lt;p&gt;Для начала нам нужно зарегистрироваться на сервисе github. По сути github.io и github.com принадлежат одной организации, с той лишь разницей, что на com расположены repository или по-русски хранилище, а на io собственно сам сервис страниц пользователей.&lt;/p&gt;

&lt;p&gt;При регистрации стоит обратить внимание, что имя пользователя будет использоваться в адресе доступа к вашей странице! То есть если вы зарегистрируетесь под именем aaabbyyyyyrrrrvaaaaalgghhh, то и доступ вашей странице будет aaabbyyyyyrrrrvaaaaalgghhh.github.io! Об этом стоит помнить!&lt;/p&gt;

&lt;p&gt;Итак, переходим по &lt;a href=&quot;https://github.com/join?source=header-home&quot;&gt;ссылке&lt;/a&gt; и создаём новый аккаунт. Регистрация на английском языке, но думаю заполнение нескольких полей не вызовет у вас трудности.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Хочу обратить ваше внимание, что указанный e-mail адрес должен быть уникальным, то есть регистрации с таким e-mail не должно быть на github. В противном случае вы получите сообщение об ошибке. Пароль тоже должен быть достаточно сложным.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_2.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На втором шаге нам предложат выбрать тарифный план (по умолчанию сервис бесплатный), ну и при желании можно включить подписку на рассылку новостей. Нажимаем далее (зелёная кнопка «Continue»).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_3.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На третьем шаге вас попросят заполнить небольшую анкету о ваших навыках в программировании и кем вы являетесь.
По сути вы можете пропустить данный шаг, нажав внизу «skip this step».
К этому моменту на почту должно прийти письмо с подтверждением о регистрации. Нажимаем на ссылку и получаем подтверждение о завершении регистрации — «Your e-mail was verified».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_4.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Далее нажимаем на кнопку «Start a project» и заполняем поля в открывшейся форме.&lt;/p&gt;

&lt;p&gt;Важно! В «Repository name» указываем имя как будет называться наш сайт, а именно имя_пользователя.github.io! Никаких других символов здесь быть не должно, в противном случает система не увидит наше хранилище и как следствие вместо страницы сайт мы получим ошибку! В поле «Description» можно указать описание сайта, что это и для чего. Оставляем режим «Public», так как «Private» доступен только по подписке за дополнительную плату.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_5.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Важно! Не в коем разе не ставьте чекбокс на «Initialize this repository with a README»!! Если это сделать, система автоматически создаст в корне проекта файл README.md и сделает его главным файлом сайта вместо index.html! Даже если потом создать файл index.html, сайт упорно будет отображать содержимое README.md. Возможно где-то в глубине настроек и есть возможность переключить режим отображения на index.html, но найти это сходу мне не удалось.&lt;/p&gt;

&lt;p&gt;Если вы разбираетесь в видах лицензий, то можете выбрать одну из них. Если же нет, оставляете всё как есть и нажимаете «Create repository».&lt;/p&gt;

&lt;p&gt;Поздравляю! Вы сделали всё правильно и теперь перед глазами новый, пустой проект. Что бы проверить наш новоиспечённый сайт, нажимаем на кнопку «Create new file».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_6.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В открывшейся форме задаём название файла index.html, а в содержимом пару строк с «Hello world!»:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    hello world!
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Промотав чуть ниже заполним ещё пару строк. Очень важно при добавлении нового файла или редактировании старого, или при любых других операциях, github всегда требует описать, что сейчас происходит. Это нужно для того, чтобы в последующем вы не запутались, какие действия были произведены.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_7a.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;В данном случае мы создали новый файл, поэтому так и пишем «Новый файл index.html». Если происходило много действий, которые вы бы хотели так же описать, можно уточнить информацию в большем поле ниже.&lt;/p&gt;

&lt;p&gt;Больше ничего не трогаем и нажимаем зелёную кнопку «Commit new file».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_7b.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Во вновь загруженной странице мы увидим наш файл и описание действий, при которых он был создан (изменён).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_8.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь самое время перейти на нашу страницу и проверить, что всё работает как надо:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/step_9.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На этом этапе можно считать регистрацию завершенной и перейти непосредственно к наполнению нашего сайта.&lt;/p&gt;

&lt;p&gt;Для работы с repository (хранилищем) на github мы воспользуемся программой «&lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt;». Как ни прискорбно, но авторы программы отказались от поддержки 32-битной версии Windows, посчитав что 3% от числа всех разработчиков это слишком мало, чтобы заморачиваться такой ерундой. Если вам не повезло и у вас такая версия, то при установке вы получите сообщение об ошибке.&lt;/p&gt;

&lt;p&gt;При случае я постараюсь рассмотреть ещё и другие программы (альтернативные) или же вы можете это сделать пока самостоятельно. Если же у вас Windows 64bit, то жмём кнопку «Download for Windows (64bit)» и устанавливаем программу. При первом запуске программы она предложит авторизоваться.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Нажимаем на ссылку «Sign into GitHub.com», после чего откроется форма, где вводим логин и пароль, который вы задавали при регистрации. Затем синюю кнопку «Sign in».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_2.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После авторизации программа сообщит, что нам присвоено имя и уникальный идентификатор под которым будут загружаться изменение я в наш репозитарий (хранилище) на github. Нажимаем синюю кнопку «Continue». Программа ещё спросил разрешение для сбора анонимной статистки по использовании программы. Если вы не хотите, что никуда не отсылались никакие данные, просто снимите чекбокс(галочку) с «Yes, submit anonymized data usage» и наконец-таки нажмите синюю кнопку «Finish».&lt;/p&gt;

&lt;p&gt;Перед нами откроется рабочее окно программы:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_3.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Нас интересует третий пункт «Clone repository». Находим в списке наш проект и выбираем его. Так же можно задать расположение проекта на диске. У меня, например, создана папка Projects на диске C. Но, если вы не хотите ничего менять, то можете оставить путь по умолчанию. Главное не забудьте, где оно будет расположено:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_4.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Далее нажимаем синюю кнопку «Clone» и дожидаемся пока наш проект загрузится из интернета.&lt;/p&gt;

&lt;p&gt;Теперь если мы откроем в проводнике нашу папку с проектом, то увидим скачанный из репозитория index.html, а также файл лицензии, если он был задан при регистрации аккаунта.&lt;/p&gt;

&lt;p&gt;Если у вас в проводнике включен режим отображения скрытых и системных файлов, то вы можете видеть ещё и папку «.git». Ни при каких условия ничего не меняйте и тем более не удаляйте эту папку! В противном случае вы не сможете загрузить файлы сайта обратно в github.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_5.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь попробуем отредактировать наш файл «index.html» в любом текстовом редакторе, например, открыв его в блокноте. Изменим содержимое на:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
    Happy New Year 2018!
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Не забудем сохранить изменения и переключимся обратно в программу «Desktop GitHub»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_6.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Рассмотрим подробнее, что же мы тут видим. Слева колонка с файлами (папками) которые были изменены. В данном случае у нас изменён только один файл — «index.html». В правой колонке показаны изменения, которые были произведены с данным файлом, а именно удалена строка 3, она отмечена красным и на её место добавлены две новых (отмечены зелёным).&lt;/p&gt;

&lt;p&gt;Теперь зададим описание действий, что мы делали — «Обновлён index.html» и нажимаем синюю кнопку «Commit to master». Изменения будут сохранены в локальной копии, а для того что бы загрузить их на наш сайт нажимаем вверху, в серой панели — «Push Origin» (На скриншоте она в данный момент выглядит как «Fetch Origin»).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_7.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь заходим в наш репозитарий (хранилище) на github и так же видим наши изменения. В зависимости от размера загружаемых данных, изменения на сайте применятся от нескольких секунд до пары минут. Теперь можем обновить нашу страничку в браузере и увидеть изменения:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/desktop_8.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь можно локально (у себя на диске) изменять файлы, удалять, создавать новые, переименовывать, перемещать итд. Главное не забывать делать «Commit to master» и затем «Push Origin».&lt;/p&gt;

&lt;p&gt;Ну и в заключении, для чего мы всё это делали. Создадим новый проект в RPG Maker MV или возьмём готовый. В меню выберем «File → Deployment» (в русской версии это будет «Файл → Экспорт»). В открывшемся окошке выбираем «Web Browsers» (Веб-браузеры). Ставим обязательно галочку в option — «Exclude unused files» (Исключить не использованные файлы). Указываем путь куда выгрузить наш проект и нажимаем «OK»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/upload_1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Несмотря на то, что мы включили режим «исключить не использованные файлы» проект получился достаточно объёмным, около 90Mb. Поэтому при желании лучше его ещё почистить от неиспользованных файлов. GitHub предоставляет в использование по рекомендации до 1GB - на каждый из хранилищ. При достижении данного объема система пришлет вам письмо «об уменьшении объемов занимаемых файлов». Так же есть ограничение, что один файл не должен иметь размер более 100МБ.&lt;/p&gt;

&lt;p&gt;Но вернёмся к нашим выгруженным файлам. Внутри мы находим папку с названием нашего проекта, а ещё дальше папку www. Теперь копируем её содержимое в папку где у нас располагается локальная копия сайта github (у меня это было C:\Projects\murplay.github.io). При этом переписываем наш файл index.html. По завершении копирования, мы увидим следующую картинку в «GitHub Desktop»:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/online_1.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь остаётся добавить сначала всё в локальную копию, выполнить «Commit to master», и затем «Push Origin».&lt;/p&gt;

&lt;p&gt;Загрузка займёт некоторое время, всё-таки порядка 280 файлов будет загружаться.&lt;/p&gt;

&lt;p&gt;По завершении открываем страничку с нашим проектом и вуаля, наша онлайн-версия работает.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/31 - Svoja stranichka na github/final.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Конечно тут будут некоторые нюансы, например, та же музыка будет воспроизводится не сразу, а лишь после подзагрузки, но это всё мелочи, решаемые плагинами. Так же хочу сказать, что github, это далеко не обычное облачное хранилище как например dropbox или google disk. Это серьёзный инструмент с возможностью контроля версий, возможностью сравнить различные версии, возможностью работать в команде и другие всякие серьёзные плюшки. Когда-нибудь (когда я в этом разберусь) я обязательно расскажу подробнее, а пока на этом всё!&lt;/p&gt;

&lt;p&gt;Хорошего настроения, творческих успехов и конечно же удачи в новом году!&lt;/p&gt;

&lt;p&gt;p.s. В будущем можно будет попробовать новые плагины онлайн — &lt;a href=&quot;http://murplay.github.io/&quot;&gt;http://murplay.github.io/&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="rpg maker mv" /><category term="github" /><category term="уроки" /><summary type="html">Новогодний привет всем!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/31%20-%20Svoja%20stranichka%20na%20github/page_title.png" /></entry><entry><title type="html">RMMV Графика для событий</title><link href="https://murlab.github.io/blog/RMMV%20Grafika%20dlja%20sobytij/" rel="alternate" type="text/html" title="RMMV Графика для событий" /><published>2017-12-29T02:04:00+03:00</published><updated>2017-12-29T02:04:00+03:00</updated><id>https://murlab.github.io/blog/RMMV%20Grafika%20dlja%20sobytij</id><content type="html" xml:base="https://murlab.github.io/blog/RMMV%20Grafika%20dlja%20sobytij/">&lt;p&gt;Всем привет!&lt;/p&gt;

&lt;p&gt;Сегодня мне бы хотелось рассказать об одной своей новой поделке, а именно о скрипте для RPG Maker MV — «MUR Event Graphics».&lt;/p&gt;

&lt;p&gt;Изначально данный скрипт задумывался для того, чтобы дать возможность немного смещать графику событий, относительно центра.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;По правде говоря, мне уже порядком поднадоело перерисовывать по десять раз одни и те же картинки каждый раз подгоняя, а достаточно ли теперь стоит тумбочка близко к стене или же её ещё надо подвинуть на пару пикселей. Или же делать несколько вариантов, когда книжка лежит с одного края стола, а теперь она ближе к другому краю, а вот на кровати она вообще должна быть по центру и выше итд.&lt;/p&gt;

&lt;p&gt;Конечно в интернете уже достаточно «обсосали» и не раз эту тему «смещения графики событий» и был написан не один скрипт, как и для VX Ace, так и для MV, но мне всё же захотелось сделать свой вариант и на это были причины.&lt;/p&gt;

&lt;p&gt;Во всех ранее предложенных вариантах была примерна одна и та же схема. В начале события создаются комментарии в которых описываются настройки, как и куда смещать нашу картинку события.  По сути у меня такая же схема, задаём команду с параметрами и вуаля.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/comments.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Начнём с первой команды, собственно команды смещения графики — &lt;strong&gt;&amp;lt;move_event_gfx_to: x, y, z&amp;gt;&lt;/strong&gt;. Как не трудно догадаться &lt;strong&gt;x&lt;/strong&gt; и &lt;strong&gt;y&lt;/strong&gt; это смещение по горизонтали и вертикали соответственно. Причём можно задать отрицательные числа и картинка будет смещена в противоположную сторону. Меняя значение &lt;strong&gt;z&lt;/strong&gt; можно задать номер слоя и, картинка может оказаться как за игроком, так и над ним (не меняя основные свойства события — «&lt;em&gt;priority&lt;/em&gt;»).&lt;/p&gt;

&lt;p&gt;Следующая идея была немного «оживить» графику события. В моей игрушке есть дирижабль, который стоит на привязи, но слегка колышется вверх-вниз.&lt;/p&gt;

&lt;p&gt;Изначально у меня было отрисовано три кадра с положением, и они циклически сменялись. Выглядело это не очень, кадров мало, возни много. И тут пришла в голову идея, что было бы очень классно, если бы картинка с дирижаблем «болталась» сама по себе без участия покадровой анимации.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/zeppelin.gif&quot; class=&quot;imgLeft&quot; /&gt;Так появилась команда — &lt;strong&gt;&amp;lt;slide_event_vertical: size, speed&amp;gt;&lt;/strong&gt;. Как ясно из названия это скольжение, а если быть точнее, то циклическое движение с эффектом маятника. По краям движение затухает, пока не сменит направление, а в середине максимально ускоряется. В параметрах можно задать размер зоны движения — &lt;strong&gt;size&lt;/strong&gt;, ну и скорость движения «объекта» — &lt;strong&gt;speed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Команда &lt;strong&gt;&amp;lt;slide_event_horizontal size, speed&amp;gt;&lt;/strong&gt; повторяет предыдущую, лишь с той разницей, что движение (мотание) происходит уже горизонтально.&lt;/p&gt;

&lt;p&gt;Возможно многие замечали, что в RPG Maker MV очень много всяких мелких недочётов, они не влияют на игровой процесс, но это как песок в сандалиях, ходить не мешает, но весьма неприятно.&lt;/p&gt;

&lt;p&gt;К такому вот «песочку» относится момент, когда персонаж заходит в какую-нибудь дверь. Меня вот очень раздражает, что он как бы входит, но при этом верхняя часть головы постоянно задевает за дверной косяк. Конечно можно нарисовать дверь чуть больше, нарисовать какую-нибудь специальную анимацию, но мне захотелось решить это вопрос раз и навсегда.&lt;/p&gt;

&lt;p&gt;Идея заключается в следующем: например, берём событие с дверью, и добавляем к нему две дополнительные картинки. Одна располагается за событием (дверью), другая поверх события.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/house_parts.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На первой (фоновой) картинке мы рисуем часть здание с тёмным (светлым) дверным проёмом, а на второй (передней) картинке мы оставляем часть изображения, но лишь до места где начинается уже сам вход.&lt;/p&gt;

&lt;p&gt;Когда персонаж заходит в дверь, он оказывается между двумя картинками и уже «не стукается головой», а спокойно проходит в дверной проём.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/house.gif&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;У этой идеи есть ещё один плюс. Во-первых, в тайлах вместо элементов (или даже целого) здания остаётся свободное место под другие элементы декора, а во-вторых теперь здания можно делать более уникальными (красивыми, разнообразными), они не привязаны ни к сетке тайлов, ни к размерам, ни к тем более положению (дверь всегда по центру).&lt;/p&gt;

&lt;p&gt;Ну и собственно сами команды — &lt;strong&gt;&amp;lt;set_event_bg_gfx: bitmap, offsetX, offsetY&amp;gt;&lt;/strong&gt; и &lt;strong&gt;&amp;lt;set_event_fg_gfx: bitmap, offsetX, offsetY&amp;gt;&lt;/strong&gt;. Первая (bg) задаёт фоновую картинку, вторая соответственно переднюю. В bitmap указывается имя картинки, которая будет подгружена из &lt;em&gt;img/events/&lt;/em&gt;, а &lt;strong&gt;offsetX&lt;/strong&gt;, &lt;strong&gt;offsetY&lt;/strong&gt; её смещение относительно центра события, например, если мы всю туже дверь захотим сместить.&lt;/p&gt;

&lt;p&gt;Следующая идея была сделать если не полноценную, то хотя бы упрощённую анимацию. Сейчас, например, можно сделать анимацию у события следующим образом. Наклепать кучу вкладок (шагов) события с привязкой к значению какой-нибудь переменной. Переходим на новый шаг, меняется картинка, меняем переменную, выжидаем паузу и хоп на следующем опросе «системой» у нас новая картина. Ну и конечно всё это должно быть в режиме «&lt;em&gt;parallel&lt;/em&gt;» (параллельно).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/animation.png&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;У этого метода куча недостатков, начиная с того, что это просто нудно делать, и заканчивая тем, что очень сложно потом отследить логику события, если по ходу придётся переключатся по каким-либо условиям.&lt;/p&gt;

&lt;p&gt;Для того, чтобы избавить себя от этого «дурдома» с кадрами, была придумана команда — &lt;strong&gt;&amp;lt;animation_event_start: frames, pause, reverse&amp;gt;&lt;/strong&gt;. Данная команда поэтапно показывает кадры события начиная с вниз 1, вниз 2, вниз 3, влево 1, влево 2,… итд.  Количество кадров можно ограничить, задав параметр — &lt;strong&gt;frames&lt;/strong&gt;. Задержку перед очередной сменой кадра можно задать в &lt;strong&gt;pause&lt;/strong&gt;. Дойдя до последнего кадра, анимация начнётся вновь с первого кадра (вниз 1), но если задать &lt;strong&gt;reverse&lt;/strong&gt; — &lt;em&gt;true&lt;/em&gt;, то анимация продолжится в обратном порядке.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/mill.gif&quot; class=&quot;imgCenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Можно конечно было бы сделать возможность и задавать внешний файл с кадрами анимации, и задавать произвольную последовательность кадров, но по правде говоря мне очень не хотелось сильно усложнять плагин, тем более, что в нём и так всё очень непросто.&lt;/p&gt;

&lt;p&gt;В качестве продолжения идеи со «скольжением» картинки, получилась ещё одна команда — &lt;strong&gt;&amp;lt;jump_event: hight, speed&amp;gt;&lt;/strong&gt;. Как не трудно догадаться из названия, картинка будет прыгать. Например, во многих аркадных играх это различные звёздочки, монетки и другие плюшки. Параметр &lt;strong&gt;hight&lt;/strong&gt; задаёт как высоко будет прыгать картинка, а &lt;strong&gt;speed&lt;/strong&gt; соответственно насколько это будет быстро происходить.&lt;/p&gt;

&lt;p&gt;В дополнении к «прыжкам» есть ещё одна команда — &lt;strong&gt;&amp;lt;set_event_shadow_to: bitmap, offsetX, offsetY&amp;gt;&lt;/strong&gt;. Данная команда добавляет позади нашего события ещё одну картинку и работает в паре с &lt;strong&gt;slide_event_vertical&lt;/strong&gt; или &lt;strong&gt;jump_event&lt;/strong&gt;. В отличии от того же &lt;strong&gt;set_event_bg_gfx&lt;/strong&gt; данная картинка подвергается дополнительным изменениям.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images.posts/2017.12/29 - RMMV Grafika dlja sobytij/coin.gif&quot; class=&quot;imgRight&quot; /&gt; Например, задав в качестве &lt;strong&gt;bitmap&lt;/strong&gt; изображение тени (которое также будет загружено из &lt;em&gt;img/events/&lt;/em&gt;), оно будет изменять свой размер и прозрачность (уровень &lt;em&gt;alpha&lt;/em&gt;) в зависимости от позиции картинки &lt;strong&gt;slide_event_vertical&lt;/strong&gt; или &lt;strong&gt;jump_event&lt;/strong&gt;. Чем выше картинка события, тем меньше картинка тени и соответственно она менее видна, чем картинка опускается ниже, тем тень становится больше и более заметна.&lt;/p&gt;

&lt;p&gt;Всё это конечно же мелочи, но в целом, я думаю, они сделают вашу игру более привлекательной, а процесс её создания менее утомительным. Скачать свежую версию плагина всегда можно с &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Event%20Graphics&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Удачи и творческих успехов!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Обновление от 2 января 2018 г.&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;К сожалению, совсем вылетело из головы, что такие объекты как Sprite, а тем более bitmap, нельзя создавать в объектах, которые потом будут сохранятся. Начиная ещё с VX Ace, RPG Maker очень нервничает, когда в файле сохранения появляются «крупные» объекты с непонятным содержимым. Так и получилось с Event’ами, ведь их состояние сохраняется в каждом файле сохранения игры, а вместе с ним и пытались сохраниться данные навешанных картинок.&lt;/p&gt;

&lt;p&gt;Сейчас логика скрипта несколько переписана, спрайты и их картинки создаются в массивах плагина и никак не связаны с содержимым event’а. Игра успешно сохраняется и загружает состояние событий.
Надеюсь больше никаких ляпов не вылезет ещё ~_~’&lt;/p&gt;

&lt;p&gt;Обновлённая версия 1.1 как всегда доступна на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Event%20Graphics&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Обновление от 6 января 2018 г.&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;Пффф! К сожалению, или к радости выявился ещё один досадный глюк, который был успешно исправлен.&lt;/p&gt;

&lt;p&gt;При обновлении сцены (например, открыть/закрыть меню) все ивенты сцены зачем-то удаляются со сцены, а затем на неё же ещё раз и добавляются заново. Ну а поскольку мой скрипт считал, что у нас уже сцена построена и ничего перерисовывать не надо тихо и молчал.&lt;/p&gt;

&lt;p&gt;Теперь при вызове метода Spriteset_Map.prototype.createCharacters элементам проставляется атрибут «а добавься-ка ты на сцену ещё разок».&lt;/p&gt;

&lt;p&gt;Новая версия 1.2 как обычно на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Event%20Graphics&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;И ещё одно обновление от 6 января 2018 г.&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;И всё-таки я балда! (≕&amp;gt;‿(“”) В ходе тестирования плагина, выяснилось что привязка к createCharacters была не самой лучшей идеей. При повторном вызове шага события, например, сменились условия, и мы вернулись на первый шаг, createCharacters вызываться не будет, так как сцена не менялась!! Для этого гораздо лучше подойдёт метод Game_Event.prototype.setupPage который вызывает первый раз при создании (изменении шага) самого события на карте.&lt;/p&gt;

&lt;p&gt;Для этого гораздо лучше подойдёт метод Game_Event.prototype.setupPage который вызывает первый раз при создании(изменении шага) самого события на карте.&lt;/p&gt;

&lt;p&gt;Уффф! Надеюсь это последняя проблема ~_~’&lt;/p&gt;

&lt;p&gt;Исправленная версия 1.3 как обычно на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Event%20Graphics&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;В качестве плюшки, плагин можно посмотреть в действии &lt;a href=&quot;https://murplay.github.io/&quot;&gt;online&lt;/a&gt; собирая монетку. Это заготовка для ещё одного плагина, но пока вот просто добавляется в карман ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;И очередное обновление от 8 января 2018 г.&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;И снова здравствуйте! Мдэ, что-то этот плагин у меня прям совсем никак не получается, уже в печёнках эти ошибки. Снова пришлось переделать всю логику обновления графики событий. Теперь при выходе из боя пропадали картинки и тень. При переделке ещё что-то отвалилось, как в той истории «Нос вытащит — хвост увязит», так и у меня. Надеюсь теперь точно всё.&lt;/p&gt;

&lt;p&gt;Исправленная версия, аж уже 1.4a всё так же доступна на &lt;a href=&quot;https://github.com/murlab/rpg-maker-mv-plugins/tree/master/Event%20Graphics&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="rpg maker mv" /><category term="plugins" /><category term="javascript" /><summary type="html">Всем привет!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://murlab.github.io/29%20-%20RMMV%20Grafika%20dlja%20sobytij/plugin_title.png" /></entry></feed>